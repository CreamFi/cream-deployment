{
  "address": "0xAB67F5edCB918a79254c30160F9F46867EB4bBc5",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cashPrior",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAccumulated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "AccrueInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservesFee",
          "type": "uint256"
        }
      ],
      "name": "Flashloan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "oldComptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "NewComptroller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "oldInterestRateModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "NewMarketInterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReserveFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewReserveFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "RepayBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesReduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralTokens",
          "type": "uint256"
        }
      ],
      "name": "UserCollateralChanged",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "_acceptAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        }
      ],
      "name": "_addReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_becomeImplementation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        }
      ],
      "name": "_reduceReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "_resignImplementation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCollateralCap",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralCap",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "_setComptroller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "_setFlashloanLender",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "_setInterestRateModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "_setPendingAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setReserveFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountCollateralTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "accrualBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "borrowIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "borrowRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "collateralCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "repay",
          "type": "bool"
        }
      ],
      "name": "estimateBorrowRatePerBlockAfterChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "repay",
          "type": "bool"
        }
      ],
      "name": "estimateSupplyRatePerBlockAfterChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "exchangeRateCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "exchangeRateStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "flashFeeBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ERC3156FlashBorrowerInterface",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "flashloanLender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "gulp",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialExchangeRateMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialExchangeRateMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "interestRateModel",
      "outputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "internalCash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isCToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCollateralTokenInit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract CTokenInterface",
          "name": "cTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "registerCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reserveFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "supplyRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "totalBorrowsCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalCollateralTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unregisterCollateral",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9288acf3952b5b5d380fdbe36dec4197cda98915575cc3502e9ebcede14eec3",
  "receipt": {
    "to": null,
    "from": "0x11df15F0C90524D3644843e1A137095373138F5a",
    "contractAddress": "0xAB67F5edCB918a79254c30160F9F46867EB4bBc5",
    "transactionIndex": 12,
    "gasUsed": "5326043",
    "logsBloom": "0x
    "blockHash": "0x0001593d0000029287bb075b23fa9264bc4241a16a88e4e18c0c4416c146db6c",
    "transactionHash": "0xf9288acf3952b5b5d380fdbe36dec4197cda98915575cc3502e9ebcede14eec3",
    "logs": [],
    "blockNumber": 32426477,
    "cumulativeGasUsed": "6085439",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c65136ab18c21117e4a03efdbaa30ddb",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservesFee\",\"type\":\"uint256\"}],\"name\":\"Flashloan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"NewCollateralCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralTokens\",\"type\":\"uint256\"}],\"name\":\"UserCollateralChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"_addReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"_reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_resignImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCollateralCap\",\"type\":\"uint256\"}],\"name\":\"_setCollateralCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"_setComptroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"_setFlashloanLender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountCollateralTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"repay\",\"type\":\"bool\"}],\"name\":\"estimateBorrowRatePerBlockAfterChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"repay\",\"type\":\"bool\"}],\"name\":\"estimateSupplyRatePerBlockAfterChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashFeeBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC3156FlashBorrowerInterface\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashloanLender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gulp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"internalCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCollateralTokenInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollateralTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unregisterCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Cream\",\"methods\":{\"_acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_addReserves(uint256)\":{\"params\":{\"addAmount\":\"The amount fo underlying token to add as reserves\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_becomeImplementation(bytes)\":{\"params\":{\"data\":\"The encoded bytes data for any initialization\"}},\"_reduceReserves(uint256)\":{\"params\":{\"reduceAmount\":\"Amount of reduction to reserves\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setCollateralCap(uint256)\":{\"params\":{\"newCollateralCap\":\"New collateral cap for this market. A value of 0 corresponds to no cap.\"}},\"_setComptroller(address)\":{\"details\":\"Admin function to set a new comptroller\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setFlashloanLender(address)\":{\"params\":{\"lender\":\"The flash loan lender which is the only caller could call flashloan\"}},\"_setInterestRateModel(address)\":{\"details\":\"Admin function to accrue interest and update the interest rate model\",\"params\":{\"newInterestRateModel\":\"the new interest rate model to use\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setReserveFactor(uint256)\":{\"details\":\"Admin function to accrue interest and set a new reserve factor\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"accrueInterest()\":{\"details\":\"This calculates interest accrued from the last checkpointed block  up to the current block and writes new checkpoint to storage.\"},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"return\":\"The number of tokens allowed to be spent (-1 means infinite)\"},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved (-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"return\":\"Whether or not the approval succeeded\"},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address of the account to query\"},\"return\":\"The number of tokens owned by `owner`\"},\"balanceOfUnderlying(address)\":{\"details\":\"This also accrues interest in a transaction\",\"params\":{\"owner\":\"The address of the account to query\"},\"return\":\"The amount of underlying owned by `owner`\"},\"borrow(uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset to borrow\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"borrowBalanceCurrent(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated after updating borrowIndex\"},\"return\":\"The calculated balance\"},\"borrowBalanceStored(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated\"},\"return\":\"The calculated balance\"},\"borrowRatePerBlock()\":{\"return\":\"The borrow interest rate per block, scaled by 1e18\"},\"estimateBorrowRatePerBlockAfterChange(uint256,bool)\":{\"return\":\"The borrow interest rate per block, scaled by 1e18\"},\"estimateSupplyRatePerBlockAfterChange(uint256,bool)\":{\"return\":\"The supply interest rate per block, scaled by 1e18\"},\"exchangeRateCurrent()\":{\"return\":\"Calculated exchange rate scaled by 1e18\"},\"exchangeRateStored()\":{\"details\":\"This function does not accrue interest before calculating the exchange rate\",\"return\":\"Calculated exchange rate scaled by 1e18\"},\"flashFee(uint256)\":{\"params\":{\"amount\":\"amount of token to borrow\"}},\"flashLoan(address,address,uint256,bytes)\":{\"params\":{\"amount\":\"The amount of the funds to be loaned\",\"data\":\"The other data\",\"initiator\":\"flash loan initiator\",\"receiver\":\"The receiver address for the funds\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"getAccountSnapshot(address)\":{\"details\":\"This is used by comptroller to more efficiently perform liquidity checks.\",\"params\":{\"account\":\"Address of the account to snapshot\"},\"return\":\"(possible error, token balance, borrow balance, exchange rate mantissa)\"},\"getCash()\":{\"return\":\"The quantity of underlying asset owned by this contract\"},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"ERC-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"ERC-20 name of this token\",\"symbol_\":\"ERC-20 symbol of this token\",\"underlying_\":\"The address of the underlying asset\"}},\"initialize(address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"EIP-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"EIP-20 name of this token\",\"symbol_\":\"EIP-20 symbol of this token\"}},\"liquidateBorrow(address,uint256,address)\":{\"params\":{\"borrower\":\"The borrower of this cToken to be liquidated\",\"cTokenCollateral\":\"The market in which to seize collateral from the borrower\",\"repayAmount\":\"The amount of the underlying borrowed asset to repay\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"mint(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"mintAmount\":\"The amount of the underlying asset to supply\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"redeem(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemTokens\":\"The number of cTokens to redeem into underlying\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"redeemUnderlying(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemAmount\":\"The amount of underlying to redeem\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"registerCollateral(address)\":{\"details\":\"This function could only be called by comptroller.\",\"params\":{\"account\":\"The account to register\"},\"return\":\"The actual registered amount of collateral\"},\"repayBorrow(uint256)\":{\"params\":{\"repayAmount\":\"The amount to repay\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"repayBorrowBehalf(address,uint256)\":{\"params\":{\"borrower\":\"the account with the debt being payed off\",\"repayAmount\":\"The amount to repay\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"seize(address,address,uint256)\":{\"details\":\"Will fail unless called by another cToken during the process of liquidation. Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\",\"params\":{\"borrower\":\"The account having collateral seized\",\"liquidator\":\"The account receiving seized collateral\",\"seizeTokens\":\"The number of cTokens to seize\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"supplyRatePerBlock()\":{\"return\":\"The supply interest rate per block, scaled by 1e18\"},\"totalBorrowsCurrent()\":{\"return\":\"The total borrows with interest\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"return\":\"Whether or not the transfer succeeded\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"return\":\"Whether or not the transfer succeeded\"},\"unregisterCollateral(address)\":{\"details\":\"This function could only be called by comptroller.\",\"params\":{\"account\":\"The account to unregister\"}}},\"title\":\"Cream's CCollateralCapErc20Delegate Contract\"},\"userdoc\":{\"methods\":{\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"_addReserves(uint256)\":{\"notice\":\"The sender adds to reserves.\"},\"_becomeImplementation(bytes)\":{\"notice\":\"Called by the delegator on a delegate to initialize it for duty\"},\"_reduceReserves(uint256)\":{\"notice\":\"Accrues interest and reduces reserves by transferring to admin\"},\"_resignImplementation()\":{\"notice\":\"Called by the delegator on a delegate to forfeit its responsibility\"},\"_setCollateralCap(uint256)\":{\"notice\":\"Set the given collateral cap for the market.\"},\"_setComptroller(address)\":{\"notice\":\"Sets a new comptroller for the market\"},\"_setFlashloanLender(address)\":{\"notice\":\"Set the flash loan lender.\"},\"_setInterestRateModel(address)\":{\"notice\":\"accrues interest and updates the interest rate model using _setInterestRateModelFresh\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"_setReserveFactor(uint256)\":{\"notice\":\"accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\"},\"accrueInterest()\":{\"notice\":\"Applies accrued interest to total borrows and reserves\"},\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the token balance of the `owner`\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Get the underlying balance of the `owner`\"},\"borrow(uint256)\":{\"notice\":\"Sender borrows assets from the protocol to their own address\"},\"borrowBalanceCurrent(address)\":{\"notice\":\"Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\"},\"borrowBalanceStored(address)\":{\"notice\":\"Return the borrow balance of account based on stored data\"},\"borrowRatePerBlock()\":{\"notice\":\"Returns the current per-block borrow interest rate for this cToken\"},\"constructor\":\"Construct an empty delegate\",\"estimateBorrowRatePerBlockAfterChange(uint256,bool)\":{\"notice\":\"Returns the estimated per-block borrow interest rate for this cToken after some change\"},\"estimateSupplyRatePerBlockAfterChange(uint256,bool)\":{\"notice\":\"Returns the estimated per-block supply interest rate for this cToken after some change\"},\"exchangeRateCurrent()\":{\"notice\":\"Accrue interest then return the up-to-date exchange rate\"},\"exchangeRateStored()\":{\"notice\":\"Calculates the exchange rate from the underlying to the CToken\"},\"flashFee(uint256)\":{\"notice\":\"Get the flash loan fees\"},\"flashLoan(address,address,uint256,bytes)\":{\"notice\":\"Flash loan funds to a given account.\"},\"getAccountSnapshot(address)\":{\"notice\":\"Get a snapshot of the account's balances, and the cached exchange rate\"},\"getCash()\":{\"notice\":\"Get cash balance of this cToken in the underlying asset\"},\"gulp()\":{\"notice\":\"Absorb excess cash into reserves.\"},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the new money market\"},\"initialize(address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the money market\"},\"liquidateBorrow(address,uint256,address)\":{\"notice\":\"The sender liquidates the borrowers collateral. The collateral seized is transferred to the liquidator.\"},\"maxFlashLoan()\":{\"notice\":\"Get the max flash loan amount\"},\"mint(uint256)\":{\"notice\":\"Sender supplies assets into the market and receives cTokens in exchange\"},\"redeem(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for the underlying asset\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for a specified amount of underlying asset\"},\"registerCollateral(address)\":{\"notice\":\"Register account collateral tokens if there is space.\"},\"repayBorrow(uint256)\":{\"notice\":\"Sender repays their own borrow\"},\"repayBorrowBehalf(address,uint256)\":{\"notice\":\"Sender repays a borrow belonging to borrower\"},\"seize(address,address,uint256)\":{\"notice\":\"Transfers collateral tokens (this market) to the liquidator.\"},\"supplyRatePerBlock()\":{\"notice\":\"Returns the current per-block supply interest rate for this cToken\"},\"totalBorrowsCurrent()\":{\"notice\":\"Returns the current total borrows plus accrued interest\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"unregisterCollateral(address)\":{\"notice\":\"Unregister account collateral tokens if the account still has enough collateral.\"}},\"notice\":\"CTokens which wrap an EIP-20 underlying and are delegated to\"}},\"settings\":{\"compilationTarget\":{\"contracts/CCollateralCapErc20Delegate.sol\":\"CCollateralCapErc20Delegate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CCollateralCapErc20.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ERC3156FlashLenderInterface.sol\\\";\\nimport \\\"./ERC3156FlashBorrowerInterface.sol\\\";\\n\\n/**\\n * @title Cream's CCollateralCapErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying with collateral cap\\n * @author Cream\\n */\\ncontract CCollateralCapErc20 is CToken, CCollateralCapErc20Interface {\\n    /**\\n     * @notice Initialize the new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     */\\n    function initialize(\\n        address underlying_,\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        // CToken initialize does the bulk of the work\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n\\n        // Set underlying and sanity check it\\n        underlying = underlying_;\\n        EIP20Interface(underlying).totalSupply();\\n    }\\n\\n    /*** User Interface ***/\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function mint(uint256 mintAmount) external returns (uint256) {\\n        (uint256 err, ) = mintInternal(mintAmount, false);\\n        require(err == 0, \\\"mint failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint256 redeemTokens) external returns (uint256) {\\n        require(redeemInternal(redeemTokens, false) == 0, \\\"redeem failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256) {\\n        require(redeemUnderlyingInternal(redeemAmount, false) == 0, \\\"redeem underlying failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrow(uint256 borrowAmount) external returns (uint256) {\\n        require(borrowInternal(borrowAmount, false) == 0, \\\"borrow failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrow(uint256 repayAmount) external returns (uint256) {\\n        (uint256 err, ) = repayBorrowInternal(repayAmount, false);\\n        require(err == 0, \\\"repay failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256) {\\n        (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount, false);\\n        require(err == 0, \\\"repay behalf failed\\\");\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external returns (uint256) {\\n        (uint256 err, ) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral, false);\\n        require(err == 0, \\\"liquidate borrow failed\\\");\\n    }\\n\\n    /**\\n     * @notice The sender adds to reserves.\\n     * @param addAmount The amount fo underlying token to add as reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReserves(uint256 addAmount) external returns (uint256) {\\n        require(_addReservesInternal(addAmount, false) == 0, \\\"add reserves failed\\\");\\n    }\\n\\n    /**\\n     * @notice Set the given collateral cap for the market.\\n     * @param newCollateralCap New collateral cap for this market. A value of 0 corresponds to no cap.\\n     */\\n    function _setCollateralCap(uint256 newCollateralCap) external {\\n        require(msg.sender == admin, \\\"admin only\\\");\\n\\n        collateralCap = newCollateralCap;\\n        emit NewCollateralCap(address(this), newCollateralCap);\\n    }\\n\\n    /**\\n     * @notice Set the flash loan lender.\\n     * @param lender The flash loan lender which is the only caller could call flashloan\\n     */\\n    function _setFlashloanLender(address lender) external {\\n        require(msg.sender == admin, \\\"admin only\\\");\\n\\n        flashloanLender = lender;\\n    }\\n\\n    /**\\n     * @notice Absorb excess cash into reserves.\\n     */\\n    function gulp() external nonReentrant {\\n        uint256 cashOnChain = getCashOnChain();\\n        uint256 cashPrior = getCashPrior();\\n\\n        uint256 excessCash = sub_(cashOnChain, cashPrior);\\n        totalReserves = add_(totalReserves, excessCash);\\n        internalCash = cashOnChain;\\n    }\\n\\n    /**\\n     * @notice Get the max flash loan amount\\n     */\\n    function maxFlashLoan() external view returns (uint256) {\\n        uint256 amount = 0;\\n        if (\\n            ComptrollerInterfaceExtension(address(comptroller)).flashloanAllowed(address(this), address(0), amount, \\\"\\\")\\n        ) {\\n            amount = getCashPrior();\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Get the flash loan fees\\n     * @param amount amount of token to borrow\\n     */\\n    function flashFee(uint256 amount) external view returns (uint256) {\\n        require(\\n            ComptrollerInterfaceExtension(address(comptroller)).flashloanAllowed(address(this), address(0), amount, \\\"\\\"),\\n            \\\"flashloan is paused\\\"\\n        );\\n        return div_(mul_(amount, flashFeeBips), 10000);\\n    }\\n\\n    /**\\n     * @notice Flash loan funds to a given account.\\n     * @param receiver The receiver address for the funds\\n     * @param initiator flash loan initiator\\n     * @param amount The amount of the funds to be loaned\\n     * @param data The other data\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function flashLoan(\\n        ERC3156FlashBorrowerInterface receiver,\\n        address initiator,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external nonReentrant returns (bool) {\\n        require(amount > 0, \\\"invalid flashloan amount\\\");\\n        require(msg.sender == flashloanLender, \\\"flashloan lender only\\\");\\n        accrueInterest();\\n        require(\\n            ComptrollerInterfaceExtension(address(comptroller)).flashloanAllowed(\\n                address(this),\\n                address(receiver),\\n                amount,\\n                data\\n            ),\\n            \\\"flashloan is paused\\\"\\n        );\\n        uint256 cashOnChainBefore = getCashOnChain();\\n        uint256 cashBefore = getCashPrior();\\n        require(cashBefore >= amount, \\\"INSUFFICIENT_LIQUIDITY\\\");\\n\\n        // 1. calculate fee, 1 bips = 1/10000\\n        uint256 totalFee = this.flashFee(amount);\\n\\n        // 2. transfer fund to receiver\\n        doTransferOut(address(uint160(address(receiver))), amount, false);\\n\\n        // 3. update totalBorrows\\n        totalBorrows = add_(totalBorrows, amount);\\n\\n        // 4. execute receiver's callback function\\n\\n        require(\\n            receiver.onFlashLoan(initiator, underlying, amount, totalFee, data) ==\\n                keccak256(\\\"ERC3156FlashBorrowerInterface.onFlashLoan\\\"),\\n            \\\"IERC3156: Callback failed\\\"\\n        );\\n\\n        // 5. take amount + fee from receiver, then check balance\\n        uint256 repaymentAmount = add_(amount, totalFee);\\n        doTransferIn(address(receiver), repaymentAmount, false);\\n\\n        uint256 cashOnChainAfter = getCashOnChain();\\n\\n        require(cashOnChainAfter == add_(cashOnChainBefore, totalFee), \\\"BALANCE_INCONSISTENT\\\");\\n\\n        // 6. update reserves and internal cash and totalBorrows\\n        uint256 reservesFee = mul_ScalarTruncate(Exp({mantissa: reserveFactorMantissa}), totalFee);\\n        totalReserves = add_(totalReserves, reservesFee);\\n        internalCash = add_(cashBefore, totalFee);\\n        totalBorrows = sub_(totalBorrows, amount);\\n\\n        emit Flashloan(address(receiver), amount, totalFee, reservesFee);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Register account collateral tokens if there is space.\\n     * @param account The account to register\\n     * @dev This function could only be called by comptroller.\\n     * @return The actual registered amount of collateral\\n     */\\n    function registerCollateral(address account) external returns (uint256) {\\n        // Make sure accountCollateralTokens of `account` is initialized.\\n        initializeAccountCollateralTokens(account);\\n\\n        require(msg.sender == address(comptroller), \\\"comptroller only\\\");\\n\\n        uint256 amount = sub_(accountTokens[account], accountCollateralTokens[account]);\\n        return increaseUserCollateralInternal(account, amount);\\n    }\\n\\n    /**\\n     * @notice Unregister account collateral tokens if the account still has enough collateral.\\n     * @dev This function could only be called by comptroller.\\n     * @param account The account to unregister\\n     */\\n    function unregisterCollateral(address account) external {\\n        // Make sure accountCollateralTokens of `account` is initialized.\\n        initializeAccountCollateralTokens(account);\\n\\n        require(msg.sender == address(comptroller), \\\"comptroller only\\\");\\n        require(comptroller.redeemAllowed(address(this), account, accountCollateralTokens[account]) == 0, \\\"rejected\\\");\\n\\n        decreaseUserCollateralInternal(account, accountCollateralTokens[account]);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets internal balance of this contract in terms of the underlying.\\n     *  It excludes balance from direct transfer.\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint256) {\\n        return internalCash;\\n    }\\n\\n    /**\\n     * @notice Gets total balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashOnChain() internal view returns (uint256) {\\n        EIP20Interface token = EIP20Interface(underlying);\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Initialize the account's collateral tokens. This function should be called in the beginning of every function\\n     *  that accesses accountCollateralTokens or accountTokens.\\n     * @param account The account of accountCollateralTokens that needs to be updated\\n     */\\n    function initializeAccountCollateralTokens(address account) internal {\\n        /**\\n         * If isCollateralTokenInit is false, it means accountCollateralTokens was not initialized yet.\\n         * This case will only happen once and must be the very beginning. accountCollateralTokens is a new structure and its\\n         * initial value should be equal to accountTokens if user has entered the market. However, it's almost impossible to\\n         * check every user's value when the implementation becomes active. Therefore, it must rely on every action which will\\n         * access accountTokens to call this function to check if accountCollateralTokens needed to be initialized.\\n         */\\n        if (!isCollateralTokenInit[account]) {\\n            if (ComptrollerInterfaceExtension(address(comptroller)).checkMembership(account, CToken(this))) {\\n                accountCollateralTokens[account] = accountTokens[account];\\n                totalCollateralTokens = add_(totalCollateralTokens, accountTokens[account]);\\n\\n                emit UserCollateralChanged(account, accountCollateralTokens[account]);\\n            }\\n            isCollateralTokenInit[account] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n     *      This will revert due to insufficient balance or insufficient allowance.\\n     *      This function returns the actual amount received,\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferIn(\\n        address from,\\n        uint256 amount,\\n        bool isNative\\n    ) internal returns (uint256) {\\n        isNative; // unused\\n\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        uint256 balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n        token.transferFrom(from, address(this), amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"transfer failed\\\");\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n        uint256 transferredIn = sub_(balanceAfter, balanceBefore);\\n        internalCash = add_(internalCash, transferredIn);\\n        return transferredIn;\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n     *      it is >= amount, this should not revert in normal conditions.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferOut(\\n        address payable to,\\n        uint256 amount,\\n        bool isNative\\n    ) internal {\\n        isNative; // unused\\n\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        token.transfer(to, amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"transfer failed\\\");\\n        internalCash = sub_(internalCash, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal returns (uint256) {\\n        // Make sure accountCollateralTokens of `src` and `dst` are initialized.\\n        initializeAccountCollateralTokens(src);\\n        initializeAccountCollateralTokens(dst);\\n\\n        /**\\n         * For every user, accountTokens must be greater than or equal to accountCollateralTokens.\\n         * The buffer between the two values will be transferred first.\\n         * bufferTokens = accountTokens[src] - accountCollateralTokens[src]\\n         * collateralTokens = tokens - bufferTokens\\n         */\\n        uint256 bufferTokens = sub_(accountTokens[src], accountCollateralTokens[src]);\\n        uint256 collateralTokens = 0;\\n        if (tokens > bufferTokens) {\\n            collateralTokens = tokens - bufferTokens;\\n        }\\n\\n        /**\\n         * Since bufferTokens are not collateralized and can be transferred freely, we only check with comptroller\\n         * whether collateralized tokens can be transferred.\\n         */\\n        require(comptroller.transferAllowed(address(this), src, dst, collateralTokens) == 0, \\\"rejected\\\");\\n\\n        /* Do not allow self-transfers */\\n        require(src != dst, \\\"bad input\\\");\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint256 startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint256(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        accountTokens[src] = sub_(accountTokens[src], tokens);\\n        accountTokens[dst] = add_(accountTokens[dst], tokens);\\n        if (collateralTokens > 0) {\\n            accountCollateralTokens[src] = sub_(accountCollateralTokens[src], collateralTokens);\\n            accountCollateralTokens[dst] = add_(accountCollateralTokens[dst], collateralTokens);\\n\\n            emit UserCollateralChanged(src, accountCollateralTokens[src]);\\n            emit UserCollateralChanged(dst, accountCollateralTokens[dst]);\\n        }\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint256(-1)) {\\n            transferAllowances[src][spender] = sub_(startingAllowance, tokens);\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Get the account's cToken balances\\n     * @param account The address of the account\\n     */\\n    function getCTokenBalanceInternal(address account) internal view returns (uint256) {\\n        if (isCollateralTokenInit[account]) {\\n            return accountCollateralTokens[account];\\n        } else {\\n            /**\\n             * If the value of accountCollateralTokens was not initialized, we should return the value of accountTokens.\\n             */\\n            return accountTokens[account];\\n        }\\n    }\\n\\n    /**\\n     * @notice Increase user's collateral. Increase as much as we can.\\n     * @param account The address of the account\\n     * @param amount The amount of collateral user wants to increase\\n     * @return The actual increased amount of collateral\\n     */\\n    function increaseUserCollateralInternal(address account, uint256 amount) internal returns (uint256) {\\n        uint256 totalCollateralTokensNew = add_(totalCollateralTokens, amount);\\n        if (collateralCap == 0 || (collateralCap != 0 && totalCollateralTokensNew <= collateralCap)) {\\n            // 1. If collateral cap is not set,\\n            // 2. If collateral cap is set but has enough space for this user,\\n            // give all the user needs.\\n            totalCollateralTokens = totalCollateralTokensNew;\\n            accountCollateralTokens[account] = add_(accountCollateralTokens[account], amount);\\n\\n            emit UserCollateralChanged(account, accountCollateralTokens[account]);\\n            return amount;\\n        } else if (collateralCap > totalCollateralTokens) {\\n            // If the collateral cap is set but the remaining cap is not enough for this user,\\n            // give the remaining parts to the user.\\n            uint256 gap = sub_(collateralCap, totalCollateralTokens);\\n            totalCollateralTokens = add_(totalCollateralTokens, gap);\\n            accountCollateralTokens[account] = add_(accountCollateralTokens[account], gap);\\n\\n            emit UserCollateralChanged(account, accountCollateralTokens[account]);\\n            return gap;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Decrease user's collateral. Reject if the amount can't be fully decrease.\\n     * @param account The address of the account\\n     * @param amount The amount of collateral user wants to decrease\\n     */\\n    function decreaseUserCollateralInternal(address account, uint256 amount) internal {\\n        /*\\n         * Return if amount is zero.\\n         * Put behind `redeemAllowed` for accuring potential COMP rewards.\\n         */\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        totalCollateralTokens = sub_(totalCollateralTokens, amount);\\n        accountCollateralTokens[account] = sub_(accountCollateralTokens[account], amount);\\n\\n        emit UserCollateralChanged(account, accountCollateralTokens[account]);\\n    }\\n\\n    struct MintLocalVars {\\n        uint256 exchangeRateMantissa;\\n        uint256 mintTokens;\\n        uint256 actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(\\n        address minter,\\n        uint256 mintAmount,\\n        bool isNative\\n    ) internal returns (uint256, uint256) {\\n        // Make sure accountCollateralTokens of `minter` is initialized.\\n        initializeAccountCollateralTokens(minter);\\n\\n        /* Fail if mint not allowed */\\n        require(comptroller.mintAllowed(address(this), minter, mintAmount) == 0, \\\"rejected\\\");\\n\\n        /*\\n         * Return if mintAmount is zero.\\n         * Put behind `mintAllowed` for accuring potential COMP rewards.\\n         */\\n        if (mintAmount == 0) {\\n            return (uint256(Error.NO_ERROR), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        MintLocalVars memory vars;\\n\\n        vars.exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount, isNative);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n        vars.mintTokens = div_ScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupply = totalSupply + mintTokens\\n         *  accountTokens[minter] = accountTokens[minter] + mintTokens\\n         */\\n        totalSupply = add_(totalSupply, vars.mintTokens);\\n        accountTokens[minter] = add_(accountTokens[minter], vars.mintTokens);\\n\\n        /*\\n         * We only allocate collateral tokens if the minter has entered the market.\\n         */\\n        if (ComptrollerInterfaceExtension(address(comptroller)).checkMembership(minter, CToken(this))) {\\n            increaseUserCollateralInternal(minter, vars.mintTokens);\\n        }\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint256(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        uint256 exchangeRateMantissa;\\n        uint256 redeemTokens;\\n        uint256 redeemAmount;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block. Only one of redeemTokensIn or redeemAmountIn may be non-zero and it would do nothing if both are zero.\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(\\n        address payable redeemer,\\n        uint256 redeemTokensIn,\\n        uint256 redeemAmountIn,\\n        bool isNative\\n    ) internal returns (uint256) {\\n        // Make sure accountCollateralTokens of `redeemer` is initialized.\\n        initializeAccountCollateralTokens(redeemer);\\n\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"bad input\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        vars.exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n            vars.redeemAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n            vars.redeemTokens = div_ScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /**\\n         * For every user, accountTokens must be greater than or equal to accountCollateralTokens.\\n         * The buffer between the two values will be redeemed first.\\n         * bufferTokens = accountTokens[redeemer] - accountCollateralTokens[redeemer]\\n         * collateralTokens = redeemTokens - bufferTokens\\n         */\\n        uint256 bufferTokens = sub_(accountTokens[redeemer], accountCollateralTokens[redeemer]);\\n        uint256 collateralTokens = 0;\\n        if (vars.redeemTokens > bufferTokens) {\\n            collateralTokens = vars.redeemTokens - bufferTokens;\\n        }\\n\\n        /* redeemAllowed might check more than user's liquidity. */\\n        require(comptroller.redeemAllowed(address(this), redeemer, collateralTokens) == 0, \\\"rejected\\\");\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        /* Reverts if protocol has insufficient cash */\\n        require(getCashPrior() >= vars.redeemAmount, \\\"insufficient cash\\\");\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        totalSupply = sub_(totalSupply, vars.redeemTokens);\\n        accountTokens[redeemer] = sub_(accountTokens[redeemer], vars.redeemTokens);\\n\\n        /*\\n         * We only deallocate collateral tokens if the redeemer needs to redeem them.\\n         */\\n        decreaseUserCollateralInternal(redeemer, collateralTokens);\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount, isNative);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) internal returns (uint256) {\\n        // Make sure accountCollateralTokens of `liquidator` and `borrower` are initialized.\\n        initializeAccountCollateralTokens(liquidator);\\n        initializeAccountCollateralTokens(borrower);\\n\\n        /* Fail if seize not allowed */\\n        require(\\n            comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens) == 0,\\n            \\\"rejected\\\"\\n        );\\n\\n        /*\\n         * Return if seizeTokens is zero.\\n         * Put behind `seizeAllowed` for accuring potential COMP rewards.\\n         */\\n        if (seizeTokens == 0) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        require(borrower != liquidator, \\\"invalid account pair\\\");\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances and token collateral balances, failing on underflow/overflow:\\n         *  accountTokens[borrower] = accountTokens[borrower] - seizeTokens\\n         *  accountTokens[liquidator] = accountTokens[liquidator] + seizeTokens\\n         *  accountCollateralTokens[borrower] = accountCollateralTokens[borrower] - seizeTokens\\n         *  accountCollateralTokens[liquidator] = accountCollateralTokens[liquidator] + seizeTokens\\n         */\\n        accountTokens[borrower] = sub_(accountTokens[borrower], seizeTokens);\\n        accountTokens[liquidator] = add_(accountTokens[liquidator], seizeTokens);\\n        accountCollateralTokens[borrower] = sub_(accountCollateralTokens[borrower], seizeTokens);\\n        accountCollateralTokens[liquidator] = add_(accountCollateralTokens[liquidator], seizeTokens);\\n\\n        /* Emit a Transfer, UserCollateralChanged events */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n        emit UserCollateralChanged(borrower, accountCollateralTokens[borrower]);\\n        emit UserCollateralChanged(liquidator, accountCollateralTokens[liquidator]);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n}\\n\",\"keccak256\":\"0x0c5619a182366b2856f6edb78794fbaf08b2cd5a739d837c97347d2a799e58e8\"},\"contracts/CCollateralCapErc20Delegate.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CCollateralCapErc20.sol\\\";\\n\\n/**\\n * @title Cream's CCollateralCapErc20Delegate Contract\\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\\n * @author Cream\\n */\\ncontract CCollateralCapErc20Delegate is CCollateralCapErc20 {\\n    /**\\n     * @notice Construct an empty delegate\\n     */\\n    constructor() public {}\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public {\\n        // Shh -- currently unused\\n        data;\\n\\n        // Shh -- we don't ever want this hook to be marked pure\\n        if (false) {\\n            implementation = address(0);\\n        }\\n\\n        require(msg.sender == admin, \\\"admin only\\\");\\n\\n        // Set internal cash when becoming implementation\\n        internalCash = getCashOnChain();\\n\\n        // Set CToken version in comptroller\\n        ComptrollerInterfaceExtension(address(comptroller)).updateCTokenVersion(\\n            address(this),\\n            ComptrollerV1Storage.Version.COLLATERALCAP\\n        );\\n    }\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public {\\n        // Shh -- we don't ever want this hook to be marked pure\\n        if (false) {\\n            implementation = address(0);\\n        }\\n\\n        require(msg.sender == admin, \\\"admin only\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf35c604954a85da65ae8581019125cb34c040982ffa273e42119490aa880317d\"},\"contracts/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        require(msg.sender == admin, \\\"admin only\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"initialized\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"invalid exchange rate\\\");\\n\\n        // Set the comptroller\\n        uint256 err = _setComptroller(comptroller_);\\n        require(err == uint256(Error.NO_ERROR), \\\"failed to set comptroller\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint256(Error.NO_ERROR), \\\"failed to set IRM\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint256) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 cTokenBalance = getCTokenBalanceInternal(account);\\n        uint256 borrowBalance = borrowBalanceStoredInternal(account);\\n        uint256 exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        return (uint256(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint256) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint256) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the estimated per-block borrow interest rate for this cToken after some change\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function estimateBorrowRatePerBlockAfterChange(uint256 change, bool repay) external view returns (uint256) {\\n        uint256 cashPriorNew;\\n        uint256 totalBorrowsNew;\\n\\n        if (repay) {\\n            cashPriorNew = add_(getCashPrior(), change);\\n            totalBorrowsNew = sub_(totalBorrows, change);\\n        } else {\\n            cashPriorNew = sub_(getCashPrior(), change);\\n            totalBorrowsNew = add_(totalBorrows, change);\\n        }\\n        return interestRateModel.getBorrowRate(cashPriorNew, totalBorrowsNew, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the estimated per-block supply interest rate for this cToken after some change\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function estimateSupplyRatePerBlockAfterChange(uint256 change, bool repay) external view returns (uint256) {\\n        uint256 cashPriorNew;\\n        uint256 totalBorrowsNew;\\n\\n        if (repay) {\\n            cashPriorNew = add_(getCashPrior(), change);\\n            totalBorrowsNew = sub_(totalBorrows, change);\\n        } else {\\n            cashPriorNew = sub_(getCashPrior(), change);\\n            totalBorrowsNew = add_(totalBorrows, change);\\n        }\\n\\n        return interestRateModel.getSupplyRate(cashPriorNew, totalBorrowsNew, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint256) {\\n        return borrowBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (uint256) {\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return 0;\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        uint256 principalTimesIndex = mul_(borrowSnapshot.principal, borrowIndex);\\n        uint256 result = div_(principalTimesIndex, borrowSnapshot.interestIndex);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint256) {\\n        return exchangeRateStoredInternal();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view returns (uint256) {\\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return initialExchangeRateMantissa;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint256 totalCash = getCashPrior();\\n            uint256 cashPlusBorrowsMinusReserves = sub_(add_(totalCash, totalBorrows), totalReserves);\\n            uint256 exchangeRate = div_(cashPlusBorrowsMinusReserves, Exp({mantissa: _totalSupply}));\\n            return exchangeRate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint256) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint256) {\\n        /* Remember the initial block number */\\n        uint256 currentBlockNumber = getBlockNumber();\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint256 cashPrior = getCashPrior();\\n        uint256 borrowsPrior = totalBorrows;\\n        uint256 reservesPrior = totalReserves;\\n        uint256 borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate too high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        uint256 blockDelta = sub_(currentBlockNumber, accrualBlockNumberPrior);\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        uint256 totalBorrowsNew = add_(interestAccumulated, borrowsPrior);\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\n            Exp({mantissa: reserveFactorMantissa}),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint256 mintAmount, bool isNative) internal nonReentrant returns (uint256, uint256) {\\n        accrueInterest();\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint256 redeemTokens, bool isNative) internal nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint256 redeemAmount, bool isNative) internal nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowInternal(uint256 borrowAmount, bool isNative) internal nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount, isNative);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n    }\\n\\n    /**\\n     * @notice Users borrow assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowFresh(\\n        address payable borrower,\\n        uint256 borrowAmount,\\n        bool isNative\\n    ) internal returns (uint256) {\\n        /* Fail if borrow not allowed */\\n        require(comptroller.borrowAllowed(address(this), borrower, borrowAmount) == 0, \\\"rejected\\\");\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        /* Reverts if protocol has insufficient cash */\\n        require(getCashPrior() >= borrowAmount, \\\"insufficient cash\\\");\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\n        vars.accountBorrowsNew = add_(vars.accountBorrows, borrowAmount);\\n        vars.totalBorrowsNew = add_(totalBorrows, borrowAmount);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount, isNative);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint256 repayAmount, bool isNative) internal nonReentrant returns (uint256, uint256) {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(\\n        address borrower,\\n        uint256 repayAmount,\\n        bool isNative\\n    ) internal nonReentrant returns (uint256, uint256) {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount, isNative);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint256 repayAmount;\\n        uint256 borrowerIndex;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n        uint256 actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        bool isNative\\n    ) internal returns (uint256, uint256) {\\n        /* Fail if repayBorrow not allowed */\\n        require(comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount) == 0, \\\"rejected\\\");\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint256(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount, isNative);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        vars.accountBorrowsNew = sub_(vars.accountBorrows, vars.actualRepayAmount);\\n        vars.totalBorrowsNew = sub_(totalBorrows, vars.actualRepayAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral,\\n        bool isNative\\n    ) internal nonReentrant returns (uint256, uint256) {\\n        accrueInterest();\\n        require(cTokenCollateral.accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral, isNative);\\n    }\\n\\n    struct LiquidateBorrowLocalVars {\\n        uint256 repayBorrowError;\\n        uint256 actualRepayAmount;\\n        uint256 amountSeizeError;\\n        uint256 seizeTokens;\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral,\\n        bool isNative\\n    ) internal returns (uint256, uint256) {\\n        /* Fail if liquidate not allowed */\\n        require(\\n            comptroller.liquidateBorrowAllowed(\\n                address(this),\\n                address(cTokenCollateral),\\n                liquidator,\\n                borrower,\\n                repayAmount\\n            ) == 0,\\n            \\\"rejected\\\"\\n        );\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        require(cTokenCollateral.accrualBlockNumber() == getBlockNumber(), \\\"market is stale\\\");\\n\\n        /* Fail if borrower = liquidator */\\n        require(borrower != liquidator, \\\"invalid account pair\\\");\\n\\n        /* Fail if repayAmount = 0 or repayAmount = -1 */\\n        require(repayAmount > 0 && repayAmount != uint256(-1), \\\"invalid close amount requested\\\");\\n\\n        LiquidateBorrowLocalVars memory vars;\\n\\n        /* Fail if repayBorrow fails */\\n        (vars.repayBorrowError, vars.actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount, isNative);\\n        require(vars.repayBorrowError == uint256(Error.NO_ERROR), \\\"repay borrow failed\\\");\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (vars.amountSeizeError, vars.seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            address(this),\\n            address(cTokenCollateral),\\n            vars.actualRepayAmount\\n        );\\n        require(vars.amountSeizeError == uint256(Error.NO_ERROR), \\\"failed to calculate seize amount\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= vars.seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint256 seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, vars.seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, vars.seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint256(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, vars.actualRepayAmount, address(cTokenCollateral), vars.seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(cTokenCollateral),\\n            liquidator,\\n            borrower,\\n            vars.actualRepayAmount,\\n            vars.seizeTokens\\n        );\\n\\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external nonReentrant returns (uint256) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() external returns (uint256) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"not comptroller\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n     * @dev Admin function to accrue interest and set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external nonReentrant returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n     * @dev Admin function to set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint256 addAmount, bool isNative) internal nonReentrant returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount, isNative);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint256 addAmount, bool isNative) internal returns (uint256, uint256) {\\n        // totalReserves + actualAddAmount\\n        uint256 totalReservesNew;\\n        uint256 actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount, isNative);\\n\\n        totalReservesNew = add_(totalReserves, actualAddAmount);\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint256(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint256 reduceAmount) external nonReentrant returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\n        // totalReserves - reduceAmount\\n        uint256 totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        // Restrict reducing reserves in wrapped token. Implementations except `CWrappedNative` won't use parameter `isNative`.\\n        doTransferOut(admin, reduceAmount, false);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"invalid IRM\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(\\n        address from,\\n        uint256 amount,\\n        bool isNative\\n    ) internal returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(\\n        address payable to,\\n        uint256 amount,\\n        bool isNative\\n    ) internal;\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal returns (uint256);\\n\\n    /**\\n     * @notice Get the account's cToken balances\\n     */\\n    function getCTokenBalanceInternal(address account) internal view returns (uint256);\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     */\\n    function mintFresh(\\n        address minter,\\n        uint256 mintAmount,\\n        bool isNative\\n    ) internal returns (uint256, uint256);\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     */\\n    function redeemFresh(\\n        address payable redeemer,\\n        uint256 redeemTokensIn,\\n        uint256 redeemAmountIn,\\n        bool isNative\\n    ) internal returns (uint256);\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) internal returns (uint256);\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0xb81f7f7548c521354f3bae03db3643709c5bec5fdc1d0342600d77060b9f332f\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ERC3156FlashBorrowerInterface.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint256 internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint256 internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint256 public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint256 public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint256 public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint256 public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint256 public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint256 public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint256) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint256 principal;\\n        uint256 interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CSupplyCapStorage {\\n    /**\\n     * @notice Internal cash counter for this CToken. Should equal underlying.balanceOf(address(this)) for CERC20.\\n     */\\n    uint256 public internalCash;\\n}\\n\\ncontract CCollateralCapStorage {\\n    /**\\n     * @notice Total number of tokens used as collateral in circulation.\\n     */\\n    uint256 public totalCollateralTokens;\\n\\n    /**\\n     * @notice Record of token balances which could be treated as collateral for each account.\\n     *         If collateral cap is not set, the value should be equal to accountTokens.\\n     */\\n    mapping(address => uint256) public accountCollateralTokens;\\n\\n    /**\\n     * @notice Check if accountCollateralTokens have been initialized.\\n     */\\n    mapping(address => bool) public isCollateralTokenInit;\\n\\n    /**\\n     * @notice Collateral cap for this CToken, zero for no cap.\\n     */\\n    uint256 public collateralCap;\\n\\n    address public flashloanLender;\\n}\\n\\ncontract CWrappedNativeStorage {\\n    address public flashloanLender;\\n}\\n\\n/*** Interface ***/\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 accountBorrows,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        address cTokenCollateral,\\n        uint256 seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) public view returns (uint256);\\n\\n    function exchangeRateCurrent() public returns (uint256);\\n\\n    function exchangeRateStored() public view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function accrueInterest() public returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint256);\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n    /*** User Interface ***/\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external returns (uint256);\\n\\n    function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\\ncontract CWrappedNativeInterface is CErc20Interface, CWrappedNativeStorage {\\n    /**\\n     * @notice Flash loan fee ratio\\n     */\\n    uint256 public constant flashFeeBips = 3;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when a flashloan occured\\n     */\\n    event Flashloan(address indexed receiver, uint256 amount, uint256 totalFee, uint256 reservesFee);\\n\\n    /*** User Interface ***/\\n\\n    function mintNative() external payable returns (uint256);\\n\\n    function redeemNative(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlyingNative(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrowNative(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrowNative() external payable returns (uint256);\\n\\n    function repayBorrowBehalfNative(address borrower) external payable returns (uint256);\\n\\n    function liquidateBorrowNative(address borrower, CTokenInterface cTokenCollateral)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function flashLoan(\\n        ERC3156FlashBorrowerInterface receiver,\\n        address initiator,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function _addReservesNative() external payable returns (uint256);\\n\\n    function collateralCap() external view returns (uint256);\\n\\n    function totalCollateralTokens() external view returns (uint256);\\n}\\n\\ncontract CCapableErc20Interface is CErc20Interface, CSupplyCapStorage {\\n    /**\\n     * @notice Flash loan fee ratio\\n     */\\n    uint256 public constant flashFeeBips = 3;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when a flashloan occured\\n     */\\n    event Flashloan(address indexed receiver, uint256 amount, uint256 totalFee, uint256 reservesFee);\\n\\n    /*** User Interface ***/\\n\\n    function gulp() external;\\n}\\n\\ncontract CCollateralCapErc20Interface is CCapableErc20Interface, CCollateralCapStorage {\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when collateral cap is set\\n     */\\n    event NewCollateralCap(address token, uint256 newCap);\\n\\n    /**\\n     * @notice Event emitted when user collateral is changed\\n     */\\n    event UserCollateralChanged(address account, uint256 newCollateralTokens);\\n\\n    /*** User Interface ***/\\n\\n    function registerCollateral(address account) external returns (uint256);\\n\\n    function unregisterCollateral(address account) external;\\n\\n    function flashLoan(\\n        ERC3156FlashBorrowerInterface receiver,\\n        address initiator,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setCollateralCap(uint256 newCollateralCap) external;\\n}\\n\\ncontract CDelegatorInterface {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) public;\\n}\\n\\ncontract CDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\\n/*** External interface ***/\\n\\n/**\\n * @title Flash loan receiver interface\\n */\\ninterface IFlashloanReceiver {\\n    function executeOperation(\\n        address sender,\\n        address underlying,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x28f27e7e712d87be502ee63f198425d331a8d75eeb72cbbc8f0d294d6a3bd4a8\"},\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint256 c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        uint256 c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x90cf991038eedf4bf014644819af5b2e8bbda13393ddb39153116f9b0de2a94c\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n}\\n\\ninterface ComptrollerInterfaceExtension {\\n    function checkMembership(address account, CToken cToken) external view returns (bool);\\n\\n    function updateCTokenVersion(address cToken, ComptrollerV1Storage.Version version) external;\\n\\n    function flashloanAllowed(\\n        address cToken,\\n        address receiver,\\n        uint256 amount,\\n        bytes calldata params\\n    ) external view returns (bool);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function supplyCaps(address market) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x548fe8a7aa9ff0a9b70be3ecbb132acc7938fe9d5a59f9bbbf93e3caef5cb5d4\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle/PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public comptrollerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint256 public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\"\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n    enum Version {\\n        VANILLA,\\n        COLLATERALCAP,\\n        WRAPPEDNATIVE\\n    }\\n\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint256 collateralFactorMantissa;\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n        /// @notice CToken version\\n        Version version;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    /// @dev This storage is depreacted.\\n    mapping(address => uint256) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    /// @dev This storage is depreacted.\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    /// @dev This storage is depreacted.\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    /// @dev This storage is depreacted.\\n    mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    /// @dev This storage is depreacted.\\n    mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    /// @dev This storage is depreacted.\\n    mapping(address => uint256) public compAccrued;\\n\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint256) public borrowCaps;\\n\\n    /// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\n    address public supplyCapGuardian;\\n\\n    /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n    mapping(address => uint256) public supplyCaps;\\n\\n    /// @notice creditLimits allowed specific protocols to borrow and repay without collateral.\\n    /// @dev This storage is depreacted.\\n    mapping(address => uint256) internal _oldCreditLimits;\\n\\n    /// @notice flashloanGuardianPaused can pause flash loan as a safety mechanism.\\n    mapping(address => bool) public flashloanGuardianPaused;\\n\\n    /// @notice liquidityMining the liquidity mining module that handles the LM rewards distribution.\\n    address public liquidityMining;\\n\\n    /// @notice creditLimits allowed specific protocols to borrow and repay specific markets without collateral.\\n    mapping(address => mapping(address => uint256)) internal _creditLimits;\\n\\n    /// @notice isMarkertDelisted records the market which has been delisted by us.\\n    mapping(address => bool) public isMarkertDelisted;\\n}\\n\",\"keccak256\":\"0xa01e2c280f9be1eb4ca82c417639e411376e72ab7a75c90d5d6aa9370e58ba5a\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x468a9f4f1d1cdc9ab69c65f71f4a5e441766a5f648d5f5c53e86d8b44385ee3f\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x38cbb1a6f7e81083c61b859cbdb4a015c6fea54988865f303495ad047d90cb76\"},\"contracts/ERC3156FlashBorrowerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface ERC3156FlashBorrowerInterface {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x18b8731a7f3303bfdb5dad4f76d30dfb2be70bca05a31cef5762dabd8e5fba76\"},\"contracts/ERC3156FlashLenderInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\nimport \\\"./ERC3156FlashBorrowerInterface.sol\\\";\\n\\ninterface ERC3156FlashLenderInterface {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        ERC3156FlashBorrowerInterface receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0d99a5009ba697a4f29e4fdf0b1bf86bafd11801b0e6614a0e089437164d2cbf\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n        return uint256(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n        return uint256(err);\\n    }\\n}\\n\",\"keccak256\":\"0xf8624446572a3999d9b4cc7b9f7e68b462c1e307247fe572ebe24035192103f7\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint256 constant expScale = 1e18;\\n    uint256 constant doubleScale = 1e36;\\n    uint256 constant halfExpScale = expScale / 2;\\n    uint256 constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    struct Double {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function div_ScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        uint256 numerator = mul_(expScale, scalar);\\n        return Exp({mantissa: div_(numerator, divisor)});\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function div_ScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (uint256) {\\n        Exp memory fraction = div_ScalarByExp(scalar, divisor);\\n        return truncate(fraction);\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(\\n        Exp memory a,\\n        Exp memory b,\\n        Exp memory c\\n    ) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n\\n    // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\\n    // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xba4952ec54a04bb19f130061e4c5c8de0634a239074be3d654263b214fb37317\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5d4f6fadca3b947ad8584b3988d99409734f2d237bcb7260fe54801fd3a31c36\"},\"contracts/PriceOracle/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /**\\n     * @notice Get the underlying price of a cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8184c962f9c4243feed1bcfa3fb225da145db3661d2c7c9decc256f851128acf\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f6280620000216000396000f3fe608060405234801561001057600080fd5b50600436106103fc5760003560e01c8063852a12e311610215578063bd6d894d11610125578063e9c714f2116100b8578063f5e3c46211610087578063f5e3c46214610e0f578063f851a44014610e45578063f8f9da2814610e4d578063fca7820b14610e55578063fe9c44ae14610e72576103fc565b8063e9c714f214610dd1578063ea11eea414610dd9578063f2b3abbd14610de1578063f3fdb15a14610e07576103fc565b8063d2bb18e9116100f4578063d2bb18e914610d76578063db006a7514610d7e578063dd62ed3e14610d9b578063e9291ad514610dc9576103fc565b8063bd6d894d14610cdf578063c37f68e214610ce7578063c5ebeaec14610d33578063d240d64a14610d50576103fc565b806399d8c1b4116101a8578063a9059cbb11610177578063a9059cbb14610c47578063aa5af0fd14610c73578063ae9d70b014610c7b578063b2a02ff114610c83578063b71d1a0c14610cb9576103fc565b806399d8c1b414610ab7578063a0712d6814610c05578063a6afed9514610c22578063a7af467a14610c2a576103fc565b80638f840ddd116101e45780638f840ddd14610a7957806394909e6214610a8157806395d89b4114610a8957806395dd919314610a91576103fc565b8063852a12e3146109ea57806385d8a2e614610a075780638897bd8514610a2d5780638b35776b14610a53576103fc565b806326782247116103105780635c60da1b116102a35780636c540baf116102725780636c540baf1461098f5780636f307dc31461099757806370a082311461099f57806373acee98146109c557806381cf00eb146109cd576103fc565b80635c60da1b146108d45780635cffe9de146108dc5780635fe3b5671461096a578063601a0bf114610972576103fc565b80633e941010116102df5780633e941010146107e55780634576b5db1461080257806347bd37181461082857806356e6772814610830576103fc565b80632678224714610775578063313ce567146107995780633af9e669146107b75780633b1d21a2146107dd576103fc565b806317bfdfbc116103935780631a31d465116103625780631a31d465146105ad57806322abdbf51461070357806323b872dd1461070b578063242c127c146107415780632608f81814610749576103fc565b806317bfdfbc1461056f57806318160ddd14610595578063182df0f51461059d57806319a4dd3c146105a5576103fc565b80630e752702116103cf5780630e7527021461051d5780630f2268881461053a578063153ab5051461055f578063173b990414610567576103fc565b80630298133a1461040157806305dd00b81461042957806306fdde0314610460578063095ea7b3146104dd575b600080fd5b6104276004803603602081101561041757600080fd5b50356001600160a01b0316610e7a565b005b61044e6004803603604081101561043f57600080fd5b50803590602001351515610eed565b60408051918252519081900360200190f35b610468610fd4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104a257818101518382015260200161048a565b50505050905090810190601f1680156104cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610509600480360360408110156104f357600080fd5b506001600160a01b038135169060200135611061565b604080519115158252519081900360200190f35b61044e6004803603602081101561053357600080fd5b50356110cc565b61044e6004803603604081101561055057600080fd5b50803590602001351515611125565b6104276111d4565b61044e611227565b61044e6004803603602081101561058557600080fd5b50356001600160a01b031661122d565b61044e6112a3565b61044e6112a9565b61044e6112b9565b610427600480360360e08110156105c357600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b81111561060557600080fd5b82018360208201111561061757600080fd5b803590602001918460018302840111600160201b8311171561063857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561068a57600080fd5b82018360208201111561069c57600080fd5b803590602001918460018302840111600160201b831117156106bd57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff1691506112bf9050565b61044e61135e565b6105096004803603606081101561072157600080fd5b506001600160a01b03813581169160208101359091169060400135611364565b61044e6113d6565b61044e6004803603604081101561075f57600080fd5b506001600160a01b03813516906020013561147b565b61077d6114dd565b604080516001600160a01b039092168252519081900360200190f35b6107a16114ec565b6040805160ff9092168252519081900360200190f35b61044e600480360360208110156107cd57600080fd5b50356001600160a01b03166114f5565b61044e611544565b61044e600480360360208110156107fb57600080fd5b503561154e565b61044e6004803603602081101561081857600080fd5b50356001600160a01b03166115a3565b61044e6116e7565b6104276004803603602081101561084657600080fd5b810190602081018135600160201b81111561086057600080fd5b82018360208201111561087257600080fd5b803590602001918460018302840111600160201b8311171561089357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506116ed945050505050565b61077d6117b7565b610509600480360360808110156108f257600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561092c57600080fd5b82018360208201111561093e57600080fd5b803590602001918460018302840111600160201b8311171561095f57600080fd5b5090925090506117c6565b61077d611d2b565b61044e6004803603602081101561098857600080fd5b5035611d3a565b61044e611dd5565b61077d611ddb565b61044e600480360360208110156109b557600080fd5b50356001600160a01b0316611dea565b61044e611e05565b610427600480360360208110156109e357600080fd5b5035611e71565b61044e60048036036020811015610a0057600080fd5b5035611f05565b61050960048036036020811015610a1d57600080fd5b50356001600160a01b0316611f64565b61044e60048036036020811015610a4357600080fd5b50356001600160a01b0316611f79565b61042760048036036020811015610a6957600080fd5b50356001600160a01b0316612010565b61044e612166565b61042761216c565b610468612201565b61044e60048036036020811015610aa757600080fd5b50356001600160a01b0316612259565b610427600480360360c0811015610acd57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610b0757600080fd5b820183602082011115610b1957600080fd5b803590602001918460018302840111600160201b83111715610b3a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610b8c57600080fd5b820183602082011115610b9e57600080fd5b803590602001918460018302840111600160201b83111715610bbf57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff1691506122649050565b61044e60048036036020811015610c1b57600080fd5b503561246a565b61044e6124bc565b61044e60048036036020811015610c4057600080fd5b50356126c3565b61050960048036036040811015610c5d57600080fd5b506001600160a01b0381351690602001356127b5565b61044e612827565b61044e61282d565b61044e60048036036060811015610c9957600080fd5b506001600160a01b038135811691602081013590911690604001356128cc565b61044e60048036036020811015610ccf57600080fd5b50356001600160a01b031661293d565b61044e6129c9565b610d0d60048036036020811015610cfd57600080fd5b50356001600160a01b0316612a3b565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61044e60048036036020811015610d4957600080fd5b5035612a77565b61044e60048036036020811015610d6657600080fd5b50356001600160a01b0316612ac6565b61044e612ad8565b61044e60048036036020811015610d9457600080fd5b5035612ade565b61044e60048036036040811015610db157600080fd5b506001600160a01b0381358116916020013516612b2d565b61077d612b58565b61044e612b67565b61044e612c6a565b61044e60048036036020811015610df757600080fd5b50356001600160a01b0316612c6f565b61077d612ca9565b61044e60048036036060811015610e2557600080fd5b506001600160a01b03813581169160208101359160409091013516612cb8565b61077d612d26565b61044e612d3a565b61044e60048036036020811015610e6b57600080fd5b5035612d9e565b610509612e1c565b60035461010090046001600160a01b03163314610ecb576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b601880546001600160a01b0319166001600160a01b0392909216919091179055565b60008060008315610f1e57610f09610f03612e21565b86612e27565b9150610f17600b5486612e64565b9050610f40565b610f2f610f29612e21565b86612e64565b9150610f3d600b5486612e27565b90505b600654600c54604080516315f2405360e01b815260048101869052602481018590526044810192909252516001600160a01b03909216916315f2405391606480820192602092909190829003018186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6020811015610fc757600080fd5b5051925050505b92915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156110595780601f1061102e57610100808354040283529160200191611059565b820191906000526020600020905b81548152906001019060200180831161103c57829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855290835281842086905581518681529151939493909284927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a35060019392505050565b6000806110da836000612e9e565b509050801561111f576040805162461bcd60e51b815260206004820152600c60248201526b1c995c185e4819985a5b195960a21b604482015290519081900360640190fd5b50919050565b600080600083156111505761113b610f03612e21565b9150611149600b5486612e64565b905061116c565b61115b610f29612e21565b9150611169600b5486612e27565b90505b600654600c5460085460408051635c0b440b60e11b8152600481018790526024810186905260448101939093526064830191909152516001600160a01b039092169163b816881691608480820192602092909190829003018186803b158015610f9d57600080fd5b60035461010090046001600160a01b03163314611225576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b565b60085481565b6000805460ff16611272576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556112846124bc565b5061128e82612259565b90505b6000805460ff19166001179055919050565b600d5481565b60006112b3612f1e565b90505b90565b60145481565b6112cd868686868686612264565b601180546001600160a01b0319166001600160a01b038981169190911791829055604080516318160ddd60e01b8152905192909116916318160ddd91600480820192602092909190829003018186803b15801561132957600080fd5b505afa15801561133d573d6000803e3d6000fd5b505050506040513d602081101561135357600080fd5b505050505050505050565b60135481565b6000805460ff166113a9576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556113bf33868686612f84565b1490506000805460ff191660011790559392505050565b600554604080516358d5bc7360e11b81523060048201526000602482018190526044820181905260806064830152608482018190529151919283926001600160a01b039091169163b1ab78e69160c4808301926020929190829003018186803b15801561144257600080fd5b505afa158015611456573d6000803e3d6000fd5b505050506040513d602081101561146c57600080fd5b5051156112b357610fce612e21565b60008061148a84846000613399565b50905080156114d6576040805162461bcd60e51b81526020600482015260136024820152721c995c185e4818995a185b198819985a5b1959606a1b604482015290519081900360640190fd5b5092915050565b6004546001600160a01b031681565b60035460ff1681565b60006114ff615d65565b60405180602001604052806115126129c9565b90526001600160a01b0384166000908152600e602052604090205490915061153b90829061341a565b9150505b919050565b60006112b3612e21565b600061155b826000613439565b1561153f576040805162461bcd60e51b8152602060048201526013602482015272185919081c995cd95c9d995cc819985a5b1959606a1b604482015290519081900360640190fd5b60035460009061010090046001600160a01b031633146115d0576115c9600160296134d7565b905061153f565b60055460408051623f1ee960e11b815290516001600160a01b0392831692851691627e3dd2916004808301926020929190829003018186803b15801561161557600080fd5b505afa158015611629573d6000803e3d6000fd5b505050506040513d602081101561163f57600080fd5b5051611684576040805162461bcd60e51b815260206004820152600f60248201526e3737ba1031b7b6b83a3937b63632b960891b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d9281900390910190a1600061153b565b600b5481565b60035461010090046001600160a01b0316331461173e576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b61174661353d565b601355600554604080516344e3de7360e01b81523060048201526001602482015290516001600160a01b03909216916344e3de739160448082019260009290919082900301818387803b15801561179c57600080fd5b505af11580156117b0573d6000803e3d6000fd5b5050505050565b6012546001600160a01b031681565b6000805460ff1661180b576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916905583611867576040805162461bcd60e51b815260206004820152601860248201527f696e76616c696420666c6173686c6f616e20616d6f756e740000000000000000604482015290519081900360640190fd5b6018546001600160a01b031633146118be576040805162461bcd60e51b8152602060048201526015602482015274666c6173686c6f616e206c656e646572206f6e6c7960581b604482015290519081900360640190fd5b6118c66124bc565b506005546040516358d5bc7360e11b815230600482018181526001600160a01b038a81166024850152604484018990526080606485019081526084850188905294169363b1ab78e6938b928a928a928a92919060a401848480828437600081840152601f19601f820116905080830192505050965050505050505060206040518083038186803b15801561195957600080fd5b505afa15801561196d573d6000803e3d6000fd5b505050506040513d602081101561198357600080fd5b50516119cc576040805162461bcd60e51b8152602060048201526013602482015272199b185cda1b1bd85b881a5cc81c185d5cd959606a1b604482015290519081900360640190fd5b60006119d661353d565b905060006119e2612e21565b905085811015611a32576040805162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b604482015290519081900360640190fd5b6000306001600160a01b031663a7af467a886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a7857600080fd5b505afa158015611a8c573d6000803e3d6000fd5b505050506040513d6020811015611aa257600080fd5b50519050611ab2898860006135bd565b611abe600b5488612e27565b600b55604051806029615ec582396040519081900360290181206011546323e30c8b60e01b83526001600160a01b038c81166004850190815291811660248501819052604485018d90526064850187905260a06084860190815260a486018c9052939550908e16936323e30c8b938e938e9289928f928f9290919060c401848480828437600081840152601f19601f820116905080830192505050975050505050505050602060405180830381600087803b158015611b7c57600080fd5b505af1158015611b90573d6000803e3d6000fd5b505050506040513d6020811015611ba657600080fd5b505114611bfa576040805162461bcd60e51b815260206004820152601960248201527f49455243333135363a2043616c6c6261636b206661696c656400000000000000604482015290519081900360640190fd5b6000611c068883612e27565b9050611c148a8260006136b6565b506000611c1f61353d565b9050611c2b8584612e27565b8114611c75576040805162461bcd60e51b8152602060048201526014602482015273109053105390d157d25390d3d394d254d511539560621b604482015290519081900360640190fd5b6000611c9160405180602001604052806008548152508561341a565b9050611c9f600c5482612e27565b600c55611cac8585612e27565b601355600b54611cbc908b612e64565b600b55604080518b81526020810186905280820183905290516001600160a01b038e16917f33c8e097c526683cbdb29adf782fac95e9d0fbe0ed635c13d8c75fdf726557d9919081900360600190a2600196505050505050506000805460ff1916600117905595945050505050565b6005546001600160a01b031681565b6000805460ff16611d7f576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155611d916124bc565b90508015611db757611daf816010811115611da857fe5b601d6134d7565b915050611291565b611dc0836138b9565b9150506000805460ff19166001179055919050565b60095481565b6011546001600160a01b031681565b6001600160a01b03166000908152600e602052604090205490565b6000805460ff16611e4a576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055611e5c6124bc565b5050600b546000805460ff1916600117905590565b60035461010090046001600160a01b03163314611ec2576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6017819055604080513081526020810183905281517f01b7c780e0f385803fe80cbe0efc086d13b8eb443a2ce43e2061fd92bc0e34f1929181900390910190a150565b6000611f128260006139b7565b1561153f576040805162461bcd60e51b815260206004820152601860248201527f72656465656d20756e6465726c79696e67206661696c65640000000000000000604482015290519081900360640190fd5b60166020526000908152604090205460ff1681565b6000611f8482613a31565b6005546001600160a01b03163314611fd6576040805162461bcd60e51b815260206004820152601060248201526f636f6d7074726f6c6c6572206f6e6c7960801b604482015290519081900360640190fd5b6001600160a01b0382166000908152600e602090815260408083205460159092528220546120049190612e64565b905061153b8382613b73565b61201981613a31565b6005546001600160a01b0316331461206b576040805162461bcd60e51b815260206004820152601060248201526f636f6d7074726f6c6c6572206f6e6c7960801b604482015290519081900360640190fd5b6005546001600160a01b03828116600081815260156020908152604080832054815163eabe7d9160e01b81523060048201526024810195909552604485015251939094169363eabe7d9193606480850194929391928390030190829087803b1580156120d657600080fd5b505af11580156120ea573d6000803e3d6000fd5b505050506040513d602081101561210057600080fd5b50511561213f576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b6001600160a01b038116600090815260156020526040902054612163908290613cc6565b50565b600c5481565b60005460ff166121b0576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556121c261353d565b905060006121ce612e21565b905060006121dc8383612e64565b90506121ea600c5482612e27565b600c5550506013556000805460ff19166001179055565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156110595780601f1061102e57610100808354040283529160200191611059565b6000610fce82613d4c565b60035461010090046001600160a01b031633146122b5576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6009541580156122c55750600a54155b612304576040805162461bcd60e51b815260206004820152600b60248201526a1a5b9a5d1a585b1a5e995960aa1b604482015290519081900360640190fd5b600784905583612353576040805162461bcd60e51b8152602060048201526015602482015274696e76616c69642065786368616e6765207261746560581b604482015290519081900360640190fd5b600061235e876115a3565b905080156123b3576040805162461bcd60e51b815260206004820152601960248201527f6661696c656420746f2073657420636f6d7074726f6c6c657200000000000000604482015290519081900360640190fd5b6123bb613da1565b600955670de0b6b3a7640000600a556123d386613da5565b9050801561241c576040805162461bcd60e51b81526020600482015260116024820152706661696c656420746f207365742049524d60781b604482015290519081900360640190fd5b835161242f906001906020870190615d78565b508251612443906002906020860190615d78565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b600080612478836000613f08565b509050801561111f576040805162461bcd60e51b815260206004820152600b60248201526a1b5a5b9d0819985a5b195960aa1b604482015290519081900360640190fd5b6000806124c7613da1565b600954909150808214156124e0576000925050506112b6565b60006124ea612e21565b600b54600c54600a54600654604080516315f2405360e01b815260048101879052602481018690526044810185905290519596509394929391926000926001600160a01b03909216916315f24053916064808301926020929190829003018186803b15801561255857600080fd5b505afa15801561256c573d6000803e3d6000fd5b505050506040513d602081101561258257600080fd5b5051905065048c273950008111156125d8576040805162461bcd60e51b81526020600482015260146024820152730c4dee4e4deee40e4c2e8ca40e8dede40d0d2ced60631b604482015290519081900360640190fd5b60006125e48888612e64565b90506125ee615d65565b61260660405180602001604052808581525083613f6d565b90506000612614828861341a565b905060006126228289612e27565b905060006126416040518060200160405280600854815250848a613f97565b9050600061265085898a613f97565b60098e9055600a819055600b849055600c839055604080518d8152602081018790528082018390526060810186905290519192507f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc04919081900360800190a160009d505050505050505050505050505090565b600554604080516358d5bc7360e11b8152306004820152600060248201819052604482018590526080606483015260848201819052915191926001600160a01b03169163b1ab78e69160c480820192602092909190829003018186803b15801561272c57600080fd5b505afa158015612740573d6000803e3d6000fd5b505050506040513d602081101561275657600080fd5b505161279f576040805162461bcd60e51b8152602060048201526013602482015272199b185cda1b1bd85b881a5cc81c185d5cd959606a1b604482015290519081900360640190fd5b610fce6127ad836003613fbf565b612710614001565b6000805460ff166127fa576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561281033338686612f84565b1490505b6000805460ff1916600117905592915050565b600a5481565b6006546000906001600160a01b031663b8168816612849612e21565b600b54600c546008546040518563ffffffff1660e01b81526004018085815260200184815260200183815260200182815260200194505050505060206040518083038186803b15801561289b57600080fd5b505afa1580156128af573d6000803e3d6000fd5b505050506040513d60208110156128c557600080fd5b5051905090565b6000805460ff16612911576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916905561292733858585614034565b90506000805460ff191660011790559392505050565b60035460009061010090046001600160a01b03163314612963576115c96001602f6134d7565b600480546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a1600061153b565b6000805460ff16612a0e576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055612a206124bc565b50612a296112a9565b90506000805460ff1916600117905590565b6000806000806000612a4c86614390565b90506000612a5987613d4c565b90506000612a65612f1e565b90506000989297509095509350915050565b6000612a848260006143ef565b1561153f576040805162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddc819985a5b1959609a1b604482015290519081900360640190fd5b60156020526000908152604090205481565b60175481565b6000612aeb826000614452565b1561153f576040805162461bcd60e51b815260206004820152600d60248201526c1c995919595b4819985a5b1959609a1b604482015290519081900360640190fd5b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6018546001600160a01b031681565b6004546000906001600160a01b031633141580612b82575033155b15612b9a57612b93600160006134d7565b90506112b6565b60038054600480546001600160a01b03818116610100818102610100600160a81b0319871617968790556001600160a01b031990931690935560408051948390048216808652929095041660208401528351909391927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600454604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160009250505090565b600381565b600080612c7a6124bc565b90508015612ca057612c98816010811115612c9157fe5b602a6134d7565b91505061153f565b61153b83613da5565b6006546001600160a01b031681565b600080612cc885858560006144b7565b5090508015612d1e576040805162461bcd60e51b815260206004820152601760248201527f6c697175696461746520626f72726f77206661696c6564000000000000000000604482015290519081900360640190fd5b509392505050565b60035461010090046001600160a01b031681565b6006546000906001600160a01b03166315f24053612d56612e21565b600b54600c546040518463ffffffff1660e01b815260040180848152602001838152602001828152602001935050505060206040518083038186803b15801561289b57600080fd5b6000805460ff16612de3576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155612df56124bc565b90508015612e1357611daf816010811115612e0c57fe5b60306134d7565b611dc0836145ee565b600181565b60135490565b6000612e5d8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250614696565b9392505050565b6000612e5d8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250614731565b60008054819060ff16612ee5576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055612ef76124bc565b50612f043333868661478b565b915091506000805460ff1916600117905590939092509050565b600d5460009080612f335750506007546112b6565b6000612f3d612e21565b90506000612f58612f5083600b54612e27565b600c54612e64565b90506000612f7482604051806020016040528087815250614a7d565b94506112b69350505050565b5090565b6000612f8f84613a31565b612f9883613a31565b6001600160a01b0384166000908152600e60209081526040808320546015909252822054612fc69190612e64565b9050600081841115612fd757508083035b600554604080516317b9b84b60e31b81523060048201526001600160a01b0389811660248301528881166044830152606482018590529151919092169163bdcdc2589160848083019260209291908290030181600087803b15801561303b57600080fd5b505af115801561304f573d6000803e3d6000fd5b505050506040513d602081101561306557600080fd5b5051156130a4576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b846001600160a01b0316866001600160a01b031614156130f7576040805162461bcd60e51b8152602060048201526009602482015268189859081a5b9c1d5d60ba1b604482015290519081900360640190fd5b60006001600160a01b038881169088161415613116575060001961313e565b506001600160a01b038087166000908152600f60209081526040808320938b16835292905220545b6001600160a01b0387166000908152600e60205260409020546131619086612e64565b6001600160a01b038089166000908152600e602052604080822093909355908816815220546131909086612e27565b6001600160a01b0387166000908152600e60205260409020558115613294576001600160a01b0387166000908152601560205260409020546131d29083612e64565b6001600160a01b0380891660009081526015602052604080822093909355908816815220546132019083612e27565b6001600160a01b03808816600090815260156020908152604080832094909455918a1680825290839020548351918252918101919091528151600080516020615f0e833981519152929181900390910190a16001600160a01b038616600081815260156020908152604091829020548251938452908301528051600080516020615f0e8339815191529281900390910190a15b60001981146132ce576132a78186612e64565b6001600160a01b038089166000908152600f60209081526040808320938d16835292905220555b856001600160a01b0316876001600160a01b0316600080516020615eee833981519152876040518082815260200191505060405180910390a36005546040805163352b4a3f60e11b81523060048201526001600160a01b038a8116602483015289811660448301526064820189905291519190921691636a56947e91608480830192600092919082900301818387803b15801561336a57600080fd5b505af115801561337e573d6000803e3d6000fd5b506000925061338b915050565b93505050505b949350505050565b60008054819060ff166133e0576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556133f26124bc565b506133ff3386868661478b565b915091506000805460ff191660011790559094909350915050565b6000613424615d65565b61342e8484613f6d565b905061339181614a9b565b6000805460ff1661347e576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556134906124bc565b905080156134b6576134ae8160108111156134a757fe5b60366134d7565b915050612814565b6134c08484614aaa565b509150506000805460ff1916600117905592915050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601081111561350657fe5b83603881111561351257fe5b604080519283526020830191909152600082820152519081900360600190a1826010811115612e5d57fe5b601154604080516370a0823160e01b815230600482015290516000926001600160a01b03169182916370a0823191602480820192602092909190829003018186803b15801561358b57600080fd5b505afa15801561359f573d6000803e3d6000fd5b505050506040513d60208110156135b557600080fd5b505191505090565b6011546040805163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905291519190921691829163a9059cbb9160448082019260009290919082900301818387803b15801561361557600080fd5b505af1158015613629573d6000803e3d6000fd5b5050505060003d60008114613645576020811461364f57600080fd5b600019915061365b565b60206000803e60005191505b50806136a0576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015290519081900360640190fd5b6136ac60135485612e64565b6013555050505050565b601154604080516370a0823160e01b815230600482015290516000926001600160a01b031691839183916370a08231916024808301926020929190829003018186803b15801561370557600080fd5b505afa158015613719573d6000803e3d6000fd5b505050506040513d602081101561372f57600080fd5b5051604080516323b872dd60e01b81526001600160a01b038981166004830152306024830152604482018990529151929350908416916323b872dd9160648082019260009290919082900301818387803b15801561378c57600080fd5b505af11580156137a0573d6000803e3d6000fd5b5050505060003d600081146137bc57602081146137c657600080fd5b60001991506137d2565b60206000803e60005191505b5080613817576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015290519081900360640190fd5b601154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561386257600080fd5b505afa158015613876573d6000803e3d6000fd5b505050506040513d602081101561388c57600080fd5b50519050600061389c8285612e64565b90506138aa60135482612e27565b60135598975050505050505050565b600354600090819061010090046001600160a01b031633146138e157612c986001601e6134d7565b6138e9613da1565b600954146138fd57612c98600a60206134d7565b82613906612e21565b101561391857612c98600e601f6134d7565b600c5483111561392e57612c98600260216134d7565b61393a600c5484612e64565b600c81905560035490915061395f9061010090046001600160a01b03168460006135bd565b600354604080516101009092046001600160a01b0316825260208201859052818101839052517f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e916060908290030190a1600061153b565b6000805460ff166139fc576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055613a0e6124bc565b50613a1c3360008585614b48565b90506000805460ff1916600117905592915050565b6001600160a01b03811660009081526016602052604090205460ff16612163576005546040805163929fe9a160e01b81526001600160a01b0384811660048301523060248301529151919092169163929fe9a1916044808301926020929190829003018186803b158015613aa457600080fd5b505afa158015613ab8573d6000803e3d6000fd5b505050506040513d6020811015613ace57600080fd5b505115613b4d576001600160a01b0381166000908152600e6020818152604080842054601583529320839055601454919052613b0991612e27565b6014556001600160a01b038116600081815260156020908152604091829020548251938452908301528051600080516020615f0e8339815191529281900390910190a15b6001600160a01b0381166000908152601660205260409020805460ff1916600117905550565b600080613b8260145484612e27565b905060175460001480613ba3575060175415801590613ba357506017548111155b15613c1e5760148190556001600160a01b038416600090815260156020526040902054613bd09084612e27565b6001600160a01b03851660008181526015602090815260409182902084905581519283528201929092528151600080516020615f0e833981519152929181900390910190a182915050610fce565b6014546017541115613cbc576000613c3a601754601454612e64565b9050613c4860145482612e27565b6014556001600160a01b038516600090815260156020526040902054613c6e9082612e27565b6001600160a01b03861660008181526015602090815260409182902084905581519283528201929092528151600080516020615f0e833981519152929181900390910190a19150610fce9050565b5060009392505050565b80613cd057613d48565b613cdc60145482612e64565b6014556001600160a01b038216600090815260156020526040902054613d029082612e64565b6001600160a01b03831660008181526015602090815260409182902084905581519283528201929092528151600080516020615f0e833981519152929181900390910190a15b5050565b6001600160a01b03811660009081526010602052604081208054613d7457600091505061153f565b6000613d868260000154600a54613fbf565b90506000613d98828460010154614001565b95945050505050565b4290565b600354600090819061010090046001600160a01b03163314613dcd57612c986001602c6134d7565b613dd5613da1565b60095414613de957612c98600a602b6134d7565b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3a57600080fd5b505afa158015613e4e573d6000803e3d6000fd5b505050506040513d6020811015613e6457600080fd5b5051613ea5576040805162461bcd60e51b815260206004820152600b60248201526a696e76616c69642049524d60a81b604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269281900390910190a1600061153b565b60008054819060ff16613f4f576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055613f616124bc565b50612f04338585614f24565b613f75615d65565b6040518060200160405280613f8e856000015185613fbf565b90529392505050565b6000613fa1615d65565b613fab8585613f6d565b9050613d98613fb982614a9b565b84612e27565b6000612e5d83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f770000000000000000008152506152a5565b6000612e5d83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b81525061531b565b600061403f84613a31565b61404883613a31565b6005546040805163d02f735160e01b81523060048201526001600160a01b03888116602483015287811660448301528681166064830152608482018690529151919092169163d02f73519160a48083019260209291908290030181600087803b1580156140b457600080fd5b505af11580156140c8573d6000803e3d6000fd5b505050506040513d60208110156140de57600080fd5b50511561411d576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b8161412a57506000613391565b836001600160a01b0316836001600160a01b03161415614188576040805162461bcd60e51b815260206004820152601460248201527334b73b30b634b21030b1b1b7bab73a103830b4b960611b604482015290519081900360640190fd5b6001600160a01b0383166000908152600e60205260409020546141ab9083612e64565b6001600160a01b038085166000908152600e602052604080822093909355908616815220546141da9083612e27565b6001600160a01b038086166000908152600e60209081526040808320949094559186168152601590915220546142109083612e64565b6001600160a01b03808516600090815260156020526040808220939093559086168152205461423f9083612e27565b6001600160a01b038086166000818152601560209081526040918290209490945580518681529051919392871692600080516020615eee83398151915292918290030190a36001600160a01b038316600081815260156020908152604091829020548251938452908301528051600080516020615f0e8339815191529281900390910190a16001600160a01b038416600081815260156020908152604091829020548251938452908301528051600080516020615f0e8339815191529281900390910190a160055460408051636d35bf9160e01b81523060048201526001600160a01b038881166024830152878116604483015286811660648301526084820186905291519190921691636d35bf919160a480830192600092919082900301818387803b15801561436f57600080fd5b505af1158015614383573d6000803e3d6000fd5b5060009250613d98915050565b6001600160a01b03811660009081526016602052604081205460ff16156143d057506001600160a01b03811660009081526015602052604090205461153f565b506001600160a01b0381166000908152600e602052604090205461153f565b6000805460ff16614434576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556144466124bc565b50613a1c33848461537d565b6000805460ff16614497576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556144a96124bc565b50613a1c3384600085614b48565b60008054819060ff166144fe576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556145106124bc565b506000846001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561454e57600080fd5b505af1158015614562573d6000803e3d6000fd5b505050506040513d602081101561457857600080fd5b5051146145c5576040805162461bcd60e51b81526020600482015260166024820152751858d8dc9d59481a5b9d195c995cdd0819985a5b195960521b604482015290519081900360640190fd5b6145d2338787878761560b565b915091506000805460ff19166001179055909590945092505050565b60035460009061010090046001600160a01b03163314614614576115c9600160316134d7565b61461c613da1565b60095414614630576115c9600a60326134d7565b670de0b6b3a764000082111561464c576115c9600260336134d7565b6008805490839055604080518281526020810185905281517faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f821460929181900390910190a1600061153b565b600083830182858210156147285760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156146ed5781810151838201526020016146d5565b50505050905090810190601f16801561471a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50949350505050565b600081848411156147835760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156146ed5781810151838201526020016146d5565b505050900390565b60055460408051631200453160e11b81523060048201526001600160a01b0387811660248301528681166044830152606482018690529151600093849316916324008a6291608480830192602092919082900301818787803b1580156147f057600080fd5b505af1158015614804573d6000803e3d6000fd5b505050506040513d602081101561481a57600080fd5b505115614859576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b614861613da1565b600954146148a8576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b6148b0615df2565b6001600160a01b03861660009081526010602052604090206001015460608201526148da86613d4c565b60808201526000198514156148f85760808101516040820152614900565b604081018590525b61490f878260400151866136b6565b60e08201819052608082015161492491612e64565b60a0820152600b5460e082015161493b9190612e64565b60c0820190815260a080830180516001600160a01b03808b16600081815260106020908152604091829020948555600a546001909501949094559551600b81905560e088015194518751938f16845293830191909152818601939093526060810191909152608081019190915291517f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19281900390910190a160055460e0820151606083015160408051631ededc9160e01b81523060048201526001600160a01b038c811660248301528b8116604483015260648201949094526084810192909252519190921691631ededc919160a480830192600092919082900301818387803b158015614a4957600080fd5b505af1158015614a5d573d6000803e3d6000fd5b5060009250614a6a915050565b8160e00151925092505094509492505050565b6000612e5d614a9484670de0b6b3a7640000613fbf565b8351614001565b51670de0b6b3a7640000900490565b600080600080614ab8613da1565b60095414614ad757614acc600a60376134d7565b93509150614b419050565b614ae23387876136b6565b9050614af0600c5482612e27565b600c819055604080513381526020810184905280820183905290519193507fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc5919081900360600190a1600093509150505b9250929050565b6000614b5385613a31565b831580614b5e575082155b614b9b576040805162461bcd60e51b8152602060048201526009602482015268189859081a5b9c1d5d60ba1b604482015290519081900360640190fd5b614ba3615e38565b614bab612f1e565b81528415614bdc57602080820186905260408051918201905281518152614bd2908661341a565b6040820152614c05565b614bf88460405180602001604052808460000151815250615d19565b6020820152604081018490525b6001600160a01b0386166000908152600e60209081526040808320546015909252822054614c339190612e64565b905060008090508183602001511115614c50578183602001510390505b6005546040805163eabe7d9160e01b81523060048201526001600160a01b038b81166024830152604482018590529151919092169163eabe7d919160648083019260209291908290030181600087803b158015614cac57600080fd5b505af1158015614cc0573d6000803e3d6000fd5b505050506040513d6020811015614cd657600080fd5b505115614d15576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b614d1d613da1565b60095414614d64576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b8260400151614d71612e21565b1015614db8576040805162461bcd60e51b81526020600482015260116024820152700d2dce6eaccccd2c6d2cadce840c6c2e6d607b1b604482015290519081900360640190fd5b614dc8600d548460200151612e64565b600d556001600160a01b0388166000908152600e602090815260409091205490840151614df59190612e64565b6001600160a01b0389166000908152600e6020526040902055614e188882613cc6565b614e27888460400151876135bd565b306001600160a01b0316886001600160a01b0316600080516020615eee83398151915285602001516040518082815260200191505060405180910390a360408084015160208086015183516001600160a01b038d168152918201929092528083019190915290517fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a9299181900360600190a1600554604080850151602086015182516351dff98960e01b81523060048201526001600160a01b038d811660248301526044820193909352606481019190915291519216916351dff9899160848082019260009290919082900301818387803b15801561336a57600080fd5b600080614f3085613a31565b60055460408051634ef4c3e160e01b81523060048201526001600160a01b0388811660248301526044820188905291519190921691634ef4c3e19160648083019260209291908290030181600087803b158015614f8c57600080fd5b505af1158015614fa0573d6000803e3d6000fd5b505050506040513d6020811015614fb657600080fd5b505115614ff5576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b836150055750600090508061529d565b61500d613da1565b60095414615054576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b61505c615e38565b615064612f1e565b81526150718686866136b6565b6040808301829052805160208101909152825181526150909190615d19565b60208201819052600d546150a391612e27565b600d556001600160a01b0386166000908152600e6020908152604090912054908201516150d09190612e27565b6001600160a01b038088166000818152600e602090815260409182902094909455600554815163929fe9a160e01b81526004810193909352306024840152905192169263929fe9a192604480840193829003018186803b15801561513357600080fd5b505afa158015615147573d6000803e3d6000fd5b505050506040513d602081101561515d57600080fd5b50511561517457615172868260200151613b73565b505b60408082015160208084015183516001600160a01b038b168152918201929092528083019190915290517f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f9181900360600190a1856001600160a01b0316306001600160a01b0316600080516020615eee83398151915283602001516040518082815260200191505060405180910390a3600554604080830151602084015182516341c728b960e01b81523060048201526001600160a01b038b811660248301526044820193909352606481019190915291519216916341c728b99160848082019260009290919082900301818387803b15801561527157600080fd5b505af1158015615285573d6000803e3d6000fd5b5060009250615292915050565b816040015192509250505b935093915050565b60008315806152b2575082155b156152bf57506000612e5d565b838302838582816152cc57fe5b041483906147285760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156146ed5781810151838201526020016146d5565b6000818361536a5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156146ed5781810151838201526020016146d5565b5082848161537457fe5b04949350505050565b6005546040805163368f515360e21b81523060048201526001600160a01b038681166024830152604482018690529151600093929092169163da3d454c9160648082019260209290919082900301818787803b1580156153dc57600080fd5b505af11580156153f0573d6000803e3d6000fd5b505050506040513d602081101561540657600080fd5b505115615445576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b61544d613da1565b60095414615494576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b8261549d612e21565b10156154e4576040805162461bcd60e51b81526020600482015260116024820152700d2dce6eaccccd2c6d2cadce840c6c2e6d607b1b604482015290519081900360640190fd5b6154ec615e59565b6154f585613d4c565b602082018190526155069085612e27565b6040820152600b546155189085612e27565b606082019081526040808301516001600160a01b0388166000908152601060205291909120908155600a5460019091015551600b556155588585856135bd565b60408082015160608084015183516001600160a01b038a16815260208101899052808501939093529082015290517f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809181900360800190a160055460408051635c77860560e01b81523060048201526001600160a01b0388811660248301526044820188905291519190921691635c77860591606480830192600092919082900301818387803b15801561436f57600080fd5b60055460408051632fe3f38f60e11b81523060048201526001600160a01b0385811660248301528881166044830152878116606483015260848201879052915160009384931691635fc7e71e9160a480830192602092919082900301818787803b15801561567857600080fd5b505af115801561568c573d6000803e3d6000fd5b505050506040513d60208110156156a257600080fd5b5051156156e1576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b6156e9613da1565b60095414615730576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b615738613da1565b846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561577157600080fd5b505afa158015615785573d6000803e3d6000fd5b505050506040513d602081101561579b57600080fd5b5051146157e1576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b866001600160a01b0316866001600160a01b0316141561583f576040805162461bcd60e51b815260206004820152601460248201527334b73b30b634b21030b1b1b7bab73a103830b4b960611b604482015290519081900360640190fd5b60008511801561585157506000198514155b6158a2576040805162461bcd60e51b815260206004820152601e60248201527f696e76616c696420636c6f736520616d6f756e74207265717565737465640000604482015290519081900360640190fd5b6158aa615e82565b6158b68888888761478b565b602083015280825215615906576040805162461bcd60e51b81526020600482015260136024820152721c995c185e48189bdc9c9bddc819985a5b1959606a1b604482015290519081900360640190fd5b60055460208201516040805163c488847b60e01b81523060048201526001600160a01b03898116602483015260448201939093528151929093169263c488847b9260648083019392829003018186803b15801561596257600080fd5b505afa158015615976573d6000803e3d6000fd5b505050506040513d604081101561598c57600080fd5b508051602090910151606083015260408201819052156159f3576040805162461bcd60e51b815260206004820181905260248201527f6661696c656420746f2063616c63756c617465207365697a6520616d6f756e74604482015290519081900360640190fd5b8060600151856001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015615a4e57600080fd5b505afa158015615a62573d6000803e3d6000fd5b505050506040513d6020811015615a7857600080fd5b50511015615acd576040805162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d5543480000000000000000604482015290519081900360640190fd5b60006001600160a01b038616301415615af757615af0308a8a8560600151614034565b9050615b87565b60608201516040805163b2a02ff160e01b81526001600160a01b038c811660048301528b81166024830152604482019390935290519188169163b2a02ff1916064808201926020929091908290030181600087803b158015615b5857600080fd5b505af1158015615b6c573d6000803e3d6000fd5b505050506040513d6020811015615b8257600080fd5b505190505b8015615bd1576040805162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b604482015290519081900360640190fd5b7f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb528989846020015189866060015160405180866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001848152602001836001600160a01b03166001600160a01b031681526020018281526020019550505050505060405180910390a160055460208301516060840151604080516347ef3b3b60e01b81523060048201526001600160a01b038b811660248301528e811660448301528d81166064830152608482019490945260a48101929092525191909216916347ef3b3b9160c480830192600092919082900301818387803b158015615ce357600080fd5b505af1158015615cf7573d6000803e3d6000fd5b5060009250615d04915050565b82602001519350935050509550959350505050565b6000615d23615d65565b61342e8484615d30615d65565b6000615d44670de0b6b3a764000085613fbf565b90506040518060200160405280615d5b8386614a7d565b9052949350505050565b6040518060200160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615db957805160ff1916838001178555615de6565b82800160010185558215615de6579182015b82811115615de6578251825591602001919060010190615dcb565b50612f80929150615eaa565b6040805161010081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b604080516080810190915280600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6112b691905b80821115612f805760008155600101615eb056fe45524333313536466c617368426f72726f776572496e746572666163652e6f6e466c6173684c6f616eddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef1d22042d9eb89f2620572acbf8d85b66fba5a2ca19d166d8659574440175c964a265627a7a72315820ded64af99502bf4479d8326f3eef4e0b56a980917f48fe65913f0ad1c8fd76a964736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103fc5760003560e01c8063852a12e311610215578063bd6d894d11610125578063e9c714f2116100b8578063f5e3c46211610087578063f5e3c46214610e0f578063f851a44014610e45578063f8f9da2814610e4d578063fca7820b14610e55578063fe9c44ae14610e72576103fc565b8063e9c714f214610dd1578063ea11eea414610dd9578063f2b3abbd14610de1578063f3fdb15a14610e07576103fc565b8063d2bb18e9116100f4578063d2bb18e914610d76578063db006a7514610d7e578063dd62ed3e14610d9b578063e9291ad514610dc9576103fc565b8063bd6d894d14610cdf578063c37f68e214610ce7578063c5ebeaec14610d33578063d240d64a14610d50576103fc565b806399d8c1b4116101a8578063a9059cbb11610177578063a9059cbb14610c47578063aa5af0fd14610c73578063ae9d70b014610c7b578063b2a02ff114610c83578063b71d1a0c14610cb9576103fc565b806399d8c1b414610ab7578063a0712d6814610c05578063a6afed9514610c22578063a7af467a14610c2a576103fc565b80638f840ddd116101e45780638f840ddd14610a7957806394909e6214610a8157806395d89b4114610a8957806395dd919314610a91576103fc565b8063852a12e3146109ea57806385d8a2e614610a075780638897bd8514610a2d5780638b35776b14610a53576103fc565b806326782247116103105780635c60da1b116102a35780636c540baf116102725780636c540baf1461098f5780636f307dc31461099757806370a082311461099f57806373acee98146109c557806381cf00eb146109cd576103fc565b80635c60da1b146108d45780635cffe9de146108dc5780635fe3b5671461096a578063601a0bf114610972576103fc565b80633e941010116102df5780633e941010146107e55780634576b5db1461080257806347bd37181461082857806356e6772814610830576103fc565b80632678224714610775578063313ce567146107995780633af9e669146107b75780633b1d21a2146107dd576103fc565b806317bfdfbc116103935780631a31d465116103625780631a31d465146105ad57806322abdbf51461070357806323b872dd1461070b578063242c127c146107415780632608f81814610749576103fc565b806317bfdfbc1461056f57806318160ddd14610595578063182df0f51461059d57806319a4dd3c146105a5576103fc565b80630e752702116103cf5780630e7527021461051d5780630f2268881461053a578063153ab5051461055f578063173b990414610567576103fc565b80630298133a1461040157806305dd00b81461042957806306fdde0314610460578063095ea7b3146104dd575b600080fd5b6104276004803603602081101561041757600080fd5b50356001600160a01b0316610e7a565b005b61044e6004803603604081101561043f57600080fd5b50803590602001351515610eed565b60408051918252519081900360200190f35b610468610fd4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104a257818101518382015260200161048a565b50505050905090810190601f1680156104cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610509600480360360408110156104f357600080fd5b506001600160a01b038135169060200135611061565b604080519115158252519081900360200190f35b61044e6004803603602081101561053357600080fd5b50356110cc565b61044e6004803603604081101561055057600080fd5b50803590602001351515611125565b6104276111d4565b61044e611227565b61044e6004803603602081101561058557600080fd5b50356001600160a01b031661122d565b61044e6112a3565b61044e6112a9565b61044e6112b9565b610427600480360360e08110156105c357600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b81111561060557600080fd5b82018360208201111561061757600080fd5b803590602001918460018302840111600160201b8311171561063857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561068a57600080fd5b82018360208201111561069c57600080fd5b803590602001918460018302840111600160201b831117156106bd57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff1691506112bf9050565b61044e61135e565b6105096004803603606081101561072157600080fd5b506001600160a01b03813581169160208101359091169060400135611364565b61044e6113d6565b61044e6004803603604081101561075f57600080fd5b506001600160a01b03813516906020013561147b565b61077d6114dd565b604080516001600160a01b039092168252519081900360200190f35b6107a16114ec565b6040805160ff9092168252519081900360200190f35b61044e600480360360208110156107cd57600080fd5b50356001600160a01b03166114f5565b61044e611544565b61044e600480360360208110156107fb57600080fd5b503561154e565b61044e6004803603602081101561081857600080fd5b50356001600160a01b03166115a3565b61044e6116e7565b6104276004803603602081101561084657600080fd5b810190602081018135600160201b81111561086057600080fd5b82018360208201111561087257600080fd5b803590602001918460018302840111600160201b8311171561089357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506116ed945050505050565b61077d6117b7565b610509600480360360808110156108f257600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561092c57600080fd5b82018360208201111561093e57600080fd5b803590602001918460018302840111600160201b8311171561095f57600080fd5b5090925090506117c6565b61077d611d2b565b61044e6004803603602081101561098857600080fd5b5035611d3a565b61044e611dd5565b61077d611ddb565b61044e600480360360208110156109b557600080fd5b50356001600160a01b0316611dea565b61044e611e05565b610427600480360360208110156109e357600080fd5b5035611e71565b61044e60048036036020811015610a0057600080fd5b5035611f05565b61050960048036036020811015610a1d57600080fd5b50356001600160a01b0316611f64565b61044e60048036036020811015610a4357600080fd5b50356001600160a01b0316611f79565b61042760048036036020811015610a6957600080fd5b50356001600160a01b0316612010565b61044e612166565b61042761216c565b610468612201565b61044e60048036036020811015610aa757600080fd5b50356001600160a01b0316612259565b610427600480360360c0811015610acd57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610b0757600080fd5b820183602082011115610b1957600080fd5b803590602001918460018302840111600160201b83111715610b3a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610b8c57600080fd5b820183602082011115610b9e57600080fd5b803590602001918460018302840111600160201b83111715610bbf57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff1691506122649050565b61044e60048036036020811015610c1b57600080fd5b503561246a565b61044e6124bc565b61044e60048036036020811015610c4057600080fd5b50356126c3565b61050960048036036040811015610c5d57600080fd5b506001600160a01b0381351690602001356127b5565b61044e612827565b61044e61282d565b61044e60048036036060811015610c9957600080fd5b506001600160a01b038135811691602081013590911690604001356128cc565b61044e60048036036020811015610ccf57600080fd5b50356001600160a01b031661293d565b61044e6129c9565b610d0d60048036036020811015610cfd57600080fd5b50356001600160a01b0316612a3b565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61044e60048036036020811015610d4957600080fd5b5035612a77565b61044e60048036036020811015610d6657600080fd5b50356001600160a01b0316612ac6565b61044e612ad8565b61044e60048036036020811015610d9457600080fd5b5035612ade565b61044e60048036036040811015610db157600080fd5b506001600160a01b0381358116916020013516612b2d565b61077d612b58565b61044e612b67565b61044e612c6a565b61044e60048036036020811015610df757600080fd5b50356001600160a01b0316612c6f565b61077d612ca9565b61044e60048036036060811015610e2557600080fd5b506001600160a01b03813581169160208101359160409091013516612cb8565b61077d612d26565b61044e612d3a565b61044e60048036036020811015610e6b57600080fd5b5035612d9e565b610509612e1c565b60035461010090046001600160a01b03163314610ecb576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b601880546001600160a01b0319166001600160a01b0392909216919091179055565b60008060008315610f1e57610f09610f03612e21565b86612e27565b9150610f17600b5486612e64565b9050610f40565b610f2f610f29612e21565b86612e64565b9150610f3d600b5486612e27565b90505b600654600c54604080516315f2405360e01b815260048101869052602481018590526044810192909252516001600160a01b03909216916315f2405391606480820192602092909190829003018186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6020811015610fc757600080fd5b5051925050505b92915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156110595780601f1061102e57610100808354040283529160200191611059565b820191906000526020600020905b81548152906001019060200180831161103c57829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855290835281842086905581518681529151939493909284927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a35060019392505050565b6000806110da836000612e9e565b509050801561111f576040805162461bcd60e51b815260206004820152600c60248201526b1c995c185e4819985a5b195960a21b604482015290519081900360640190fd5b50919050565b600080600083156111505761113b610f03612e21565b9150611149600b5486612e64565b905061116c565b61115b610f29612e21565b9150611169600b5486612e27565b90505b600654600c5460085460408051635c0b440b60e11b8152600481018790526024810186905260448101939093526064830191909152516001600160a01b039092169163b816881691608480820192602092909190829003018186803b158015610f9d57600080fd5b60035461010090046001600160a01b03163314611225576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b565b60085481565b6000805460ff16611272576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556112846124bc565b5061128e82612259565b90505b6000805460ff19166001179055919050565b600d5481565b60006112b3612f1e565b90505b90565b60145481565b6112cd868686868686612264565b601180546001600160a01b0319166001600160a01b038981169190911791829055604080516318160ddd60e01b8152905192909116916318160ddd91600480820192602092909190829003018186803b15801561132957600080fd5b505afa15801561133d573d6000803e3d6000fd5b505050506040513d602081101561135357600080fd5b505050505050505050565b60135481565b6000805460ff166113a9576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556113bf33868686612f84565b1490506000805460ff191660011790559392505050565b600554604080516358d5bc7360e11b81523060048201526000602482018190526044820181905260806064830152608482018190529151919283926001600160a01b039091169163b1ab78e69160c4808301926020929190829003018186803b15801561144257600080fd5b505afa158015611456573d6000803e3d6000fd5b505050506040513d602081101561146c57600080fd5b5051156112b357610fce612e21565b60008061148a84846000613399565b50905080156114d6576040805162461bcd60e51b81526020600482015260136024820152721c995c185e4818995a185b198819985a5b1959606a1b604482015290519081900360640190fd5b5092915050565b6004546001600160a01b031681565b60035460ff1681565b60006114ff615d65565b60405180602001604052806115126129c9565b90526001600160a01b0384166000908152600e602052604090205490915061153b90829061341a565b9150505b919050565b60006112b3612e21565b600061155b826000613439565b1561153f576040805162461bcd60e51b8152602060048201526013602482015272185919081c995cd95c9d995cc819985a5b1959606a1b604482015290519081900360640190fd5b60035460009061010090046001600160a01b031633146115d0576115c9600160296134d7565b905061153f565b60055460408051623f1ee960e11b815290516001600160a01b0392831692851691627e3dd2916004808301926020929190829003018186803b15801561161557600080fd5b505afa158015611629573d6000803e3d6000fd5b505050506040513d602081101561163f57600080fd5b5051611684576040805162461bcd60e51b815260206004820152600f60248201526e3737ba1031b7b6b83a3937b63632b960891b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d9281900390910190a1600061153b565b600b5481565b60035461010090046001600160a01b0316331461173e576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b61174661353d565b601355600554604080516344e3de7360e01b81523060048201526001602482015290516001600160a01b03909216916344e3de739160448082019260009290919082900301818387803b15801561179c57600080fd5b505af11580156117b0573d6000803e3d6000fd5b5050505050565b6012546001600160a01b031681565b6000805460ff1661180b576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916905583611867576040805162461bcd60e51b815260206004820152601860248201527f696e76616c696420666c6173686c6f616e20616d6f756e740000000000000000604482015290519081900360640190fd5b6018546001600160a01b031633146118be576040805162461bcd60e51b8152602060048201526015602482015274666c6173686c6f616e206c656e646572206f6e6c7960581b604482015290519081900360640190fd5b6118c66124bc565b506005546040516358d5bc7360e11b815230600482018181526001600160a01b038a81166024850152604484018990526080606485019081526084850188905294169363b1ab78e6938b928a928a928a92919060a401848480828437600081840152601f19601f820116905080830192505050965050505050505060206040518083038186803b15801561195957600080fd5b505afa15801561196d573d6000803e3d6000fd5b505050506040513d602081101561198357600080fd5b50516119cc576040805162461bcd60e51b8152602060048201526013602482015272199b185cda1b1bd85b881a5cc81c185d5cd959606a1b604482015290519081900360640190fd5b60006119d661353d565b905060006119e2612e21565b905085811015611a32576040805162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b604482015290519081900360640190fd5b6000306001600160a01b031663a7af467a886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a7857600080fd5b505afa158015611a8c573d6000803e3d6000fd5b505050506040513d6020811015611aa257600080fd5b50519050611ab2898860006135bd565b611abe600b5488612e27565b600b55604051806029615ec582396040519081900360290181206011546323e30c8b60e01b83526001600160a01b038c81166004850190815291811660248501819052604485018d90526064850187905260a06084860190815260a486018c9052939550908e16936323e30c8b938e938e9289928f928f9290919060c401848480828437600081840152601f19601f820116905080830192505050975050505050505050602060405180830381600087803b158015611b7c57600080fd5b505af1158015611b90573d6000803e3d6000fd5b505050506040513d6020811015611ba657600080fd5b505114611bfa576040805162461bcd60e51b815260206004820152601960248201527f49455243333135363a2043616c6c6261636b206661696c656400000000000000604482015290519081900360640190fd5b6000611c068883612e27565b9050611c148a8260006136b6565b506000611c1f61353d565b9050611c2b8584612e27565b8114611c75576040805162461bcd60e51b8152602060048201526014602482015273109053105390d157d25390d3d394d254d511539560621b604482015290519081900360640190fd5b6000611c9160405180602001604052806008548152508561341a565b9050611c9f600c5482612e27565b600c55611cac8585612e27565b601355600b54611cbc908b612e64565b600b55604080518b81526020810186905280820183905290516001600160a01b038e16917f33c8e097c526683cbdb29adf782fac95e9d0fbe0ed635c13d8c75fdf726557d9919081900360600190a2600196505050505050506000805460ff1916600117905595945050505050565b6005546001600160a01b031681565b6000805460ff16611d7f576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155611d916124bc565b90508015611db757611daf816010811115611da857fe5b601d6134d7565b915050611291565b611dc0836138b9565b9150506000805460ff19166001179055919050565b60095481565b6011546001600160a01b031681565b6001600160a01b03166000908152600e602052604090205490565b6000805460ff16611e4a576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055611e5c6124bc565b5050600b546000805460ff1916600117905590565b60035461010090046001600160a01b03163314611ec2576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6017819055604080513081526020810183905281517f01b7c780e0f385803fe80cbe0efc086d13b8eb443a2ce43e2061fd92bc0e34f1929181900390910190a150565b6000611f128260006139b7565b1561153f576040805162461bcd60e51b815260206004820152601860248201527f72656465656d20756e6465726c79696e67206661696c65640000000000000000604482015290519081900360640190fd5b60166020526000908152604090205460ff1681565b6000611f8482613a31565b6005546001600160a01b03163314611fd6576040805162461bcd60e51b815260206004820152601060248201526f636f6d7074726f6c6c6572206f6e6c7960801b604482015290519081900360640190fd5b6001600160a01b0382166000908152600e602090815260408083205460159092528220546120049190612e64565b905061153b8382613b73565b61201981613a31565b6005546001600160a01b0316331461206b576040805162461bcd60e51b815260206004820152601060248201526f636f6d7074726f6c6c6572206f6e6c7960801b604482015290519081900360640190fd5b6005546001600160a01b03828116600081815260156020908152604080832054815163eabe7d9160e01b81523060048201526024810195909552604485015251939094169363eabe7d9193606480850194929391928390030190829087803b1580156120d657600080fd5b505af11580156120ea573d6000803e3d6000fd5b505050506040513d602081101561210057600080fd5b50511561213f576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b6001600160a01b038116600090815260156020526040902054612163908290613cc6565b50565b600c5481565b60005460ff166121b0576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556121c261353d565b905060006121ce612e21565b905060006121dc8383612e64565b90506121ea600c5482612e27565b600c5550506013556000805460ff19166001179055565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156110595780601f1061102e57610100808354040283529160200191611059565b6000610fce82613d4c565b60035461010090046001600160a01b031633146122b5576040805162461bcd60e51b815260206004820152600a60248201526961646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6009541580156122c55750600a54155b612304576040805162461bcd60e51b815260206004820152600b60248201526a1a5b9a5d1a585b1a5e995960aa1b604482015290519081900360640190fd5b600784905583612353576040805162461bcd60e51b8152602060048201526015602482015274696e76616c69642065786368616e6765207261746560581b604482015290519081900360640190fd5b600061235e876115a3565b905080156123b3576040805162461bcd60e51b815260206004820152601960248201527f6661696c656420746f2073657420636f6d7074726f6c6c657200000000000000604482015290519081900360640190fd5b6123bb613da1565b600955670de0b6b3a7640000600a556123d386613da5565b9050801561241c576040805162461bcd60e51b81526020600482015260116024820152706661696c656420746f207365742049524d60781b604482015290519081900360640190fd5b835161242f906001906020870190615d78565b508251612443906002906020860190615d78565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b600080612478836000613f08565b509050801561111f576040805162461bcd60e51b815260206004820152600b60248201526a1b5a5b9d0819985a5b195960aa1b604482015290519081900360640190fd5b6000806124c7613da1565b600954909150808214156124e0576000925050506112b6565b60006124ea612e21565b600b54600c54600a54600654604080516315f2405360e01b815260048101879052602481018690526044810185905290519596509394929391926000926001600160a01b03909216916315f24053916064808301926020929190829003018186803b15801561255857600080fd5b505afa15801561256c573d6000803e3d6000fd5b505050506040513d602081101561258257600080fd5b5051905065048c273950008111156125d8576040805162461bcd60e51b81526020600482015260146024820152730c4dee4e4deee40e4c2e8ca40e8dede40d0d2ced60631b604482015290519081900360640190fd5b60006125e48888612e64565b90506125ee615d65565b61260660405180602001604052808581525083613f6d565b90506000612614828861341a565b905060006126228289612e27565b905060006126416040518060200160405280600854815250848a613f97565b9050600061265085898a613f97565b60098e9055600a819055600b849055600c839055604080518d8152602081018790528082018390526060810186905290519192507f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc04919081900360800190a160009d505050505050505050505050505090565b600554604080516358d5bc7360e11b8152306004820152600060248201819052604482018590526080606483015260848201819052915191926001600160a01b03169163b1ab78e69160c480820192602092909190829003018186803b15801561272c57600080fd5b505afa158015612740573d6000803e3d6000fd5b505050506040513d602081101561275657600080fd5b505161279f576040805162461bcd60e51b8152602060048201526013602482015272199b185cda1b1bd85b881a5cc81c185d5cd959606a1b604482015290519081900360640190fd5b610fce6127ad836003613fbf565b612710614001565b6000805460ff166127fa576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561281033338686612f84565b1490505b6000805460ff1916600117905592915050565b600a5481565b6006546000906001600160a01b031663b8168816612849612e21565b600b54600c546008546040518563ffffffff1660e01b81526004018085815260200184815260200183815260200182815260200194505050505060206040518083038186803b15801561289b57600080fd5b505afa1580156128af573d6000803e3d6000fd5b505050506040513d60208110156128c557600080fd5b5051905090565b6000805460ff16612911576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916905561292733858585614034565b90506000805460ff191660011790559392505050565b60035460009061010090046001600160a01b03163314612963576115c96001602f6134d7565b600480546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a1600061153b565b6000805460ff16612a0e576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055612a206124bc565b50612a296112a9565b90506000805460ff1916600117905590565b6000806000806000612a4c86614390565b90506000612a5987613d4c565b90506000612a65612f1e565b90506000989297509095509350915050565b6000612a848260006143ef565b1561153f576040805162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddc819985a5b1959609a1b604482015290519081900360640190fd5b60156020526000908152604090205481565b60175481565b6000612aeb826000614452565b1561153f576040805162461bcd60e51b815260206004820152600d60248201526c1c995919595b4819985a5b1959609a1b604482015290519081900360640190fd5b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6018546001600160a01b031681565b6004546000906001600160a01b031633141580612b82575033155b15612b9a57612b93600160006134d7565b90506112b6565b60038054600480546001600160a01b03818116610100818102610100600160a81b0319871617968790556001600160a01b031990931690935560408051948390048216808652929095041660208401528351909391927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600454604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160009250505090565b600381565b600080612c7a6124bc565b90508015612ca057612c98816010811115612c9157fe5b602a6134d7565b91505061153f565b61153b83613da5565b6006546001600160a01b031681565b600080612cc885858560006144b7565b5090508015612d1e576040805162461bcd60e51b815260206004820152601760248201527f6c697175696461746520626f72726f77206661696c6564000000000000000000604482015290519081900360640190fd5b509392505050565b60035461010090046001600160a01b031681565b6006546000906001600160a01b03166315f24053612d56612e21565b600b54600c546040518463ffffffff1660e01b815260040180848152602001838152602001828152602001935050505060206040518083038186803b15801561289b57600080fd5b6000805460ff16612de3576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155612df56124bc565b90508015612e1357611daf816010811115612e0c57fe5b60306134d7565b611dc0836145ee565b600181565b60135490565b6000612e5d8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250614696565b9392505050565b6000612e5d8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250614731565b60008054819060ff16612ee5576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055612ef76124bc565b50612f043333868661478b565b915091506000805460ff1916600117905590939092509050565b600d5460009080612f335750506007546112b6565b6000612f3d612e21565b90506000612f58612f5083600b54612e27565b600c54612e64565b90506000612f7482604051806020016040528087815250614a7d565b94506112b69350505050565b5090565b6000612f8f84613a31565b612f9883613a31565b6001600160a01b0384166000908152600e60209081526040808320546015909252822054612fc69190612e64565b9050600081841115612fd757508083035b600554604080516317b9b84b60e31b81523060048201526001600160a01b0389811660248301528881166044830152606482018590529151919092169163bdcdc2589160848083019260209291908290030181600087803b15801561303b57600080fd5b505af115801561304f573d6000803e3d6000fd5b505050506040513d602081101561306557600080fd5b5051156130a4576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b846001600160a01b0316866001600160a01b031614156130f7576040805162461bcd60e51b8152602060048201526009602482015268189859081a5b9c1d5d60ba1b604482015290519081900360640190fd5b60006001600160a01b038881169088161415613116575060001961313e565b506001600160a01b038087166000908152600f60209081526040808320938b16835292905220545b6001600160a01b0387166000908152600e60205260409020546131619086612e64565b6001600160a01b038089166000908152600e602052604080822093909355908816815220546131909086612e27565b6001600160a01b0387166000908152600e60205260409020558115613294576001600160a01b0387166000908152601560205260409020546131d29083612e64565b6001600160a01b0380891660009081526015602052604080822093909355908816815220546132019083612e27565b6001600160a01b03808816600090815260156020908152604080832094909455918a1680825290839020548351918252918101919091528151600080516020615f0e833981519152929181900390910190a16001600160a01b038616600081815260156020908152604091829020548251938452908301528051600080516020615f0e8339815191529281900390910190a15b60001981146132ce576132a78186612e64565b6001600160a01b038089166000908152600f60209081526040808320938d16835292905220555b856001600160a01b0316876001600160a01b0316600080516020615eee833981519152876040518082815260200191505060405180910390a36005546040805163352b4a3f60e11b81523060048201526001600160a01b038a8116602483015289811660448301526064820189905291519190921691636a56947e91608480830192600092919082900301818387803b15801561336a57600080fd5b505af115801561337e573d6000803e3d6000fd5b506000925061338b915050565b93505050505b949350505050565b60008054819060ff166133e0576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556133f26124bc565b506133ff3386868661478b565b915091506000805460ff191660011790559094909350915050565b6000613424615d65565b61342e8484613f6d565b905061339181614a9b565b6000805460ff1661347e576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556134906124bc565b905080156134b6576134ae8160108111156134a757fe5b60366134d7565b915050612814565b6134c08484614aaa565b509150506000805460ff1916600117905592915050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601081111561350657fe5b83603881111561351257fe5b604080519283526020830191909152600082820152519081900360600190a1826010811115612e5d57fe5b601154604080516370a0823160e01b815230600482015290516000926001600160a01b03169182916370a0823191602480820192602092909190829003018186803b15801561358b57600080fd5b505afa15801561359f573d6000803e3d6000fd5b505050506040513d60208110156135b557600080fd5b505191505090565b6011546040805163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905291519190921691829163a9059cbb9160448082019260009290919082900301818387803b15801561361557600080fd5b505af1158015613629573d6000803e3d6000fd5b5050505060003d60008114613645576020811461364f57600080fd5b600019915061365b565b60206000803e60005191505b50806136a0576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015290519081900360640190fd5b6136ac60135485612e64565b6013555050505050565b601154604080516370a0823160e01b815230600482015290516000926001600160a01b031691839183916370a08231916024808301926020929190829003018186803b15801561370557600080fd5b505afa158015613719573d6000803e3d6000fd5b505050506040513d602081101561372f57600080fd5b5051604080516323b872dd60e01b81526001600160a01b038981166004830152306024830152604482018990529151929350908416916323b872dd9160648082019260009290919082900301818387803b15801561378c57600080fd5b505af11580156137a0573d6000803e3d6000fd5b5050505060003d600081146137bc57602081146137c657600080fd5b60001991506137d2565b60206000803e60005191505b5080613817576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015290519081900360640190fd5b601154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561386257600080fd5b505afa158015613876573d6000803e3d6000fd5b505050506040513d602081101561388c57600080fd5b50519050600061389c8285612e64565b90506138aa60135482612e27565b60135598975050505050505050565b600354600090819061010090046001600160a01b031633146138e157612c986001601e6134d7565b6138e9613da1565b600954146138fd57612c98600a60206134d7565b82613906612e21565b101561391857612c98600e601f6134d7565b600c5483111561392e57612c98600260216134d7565b61393a600c5484612e64565b600c81905560035490915061395f9061010090046001600160a01b03168460006135bd565b600354604080516101009092046001600160a01b0316825260208201859052818101839052517f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e916060908290030190a1600061153b565b6000805460ff166139fc576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055613a0e6124bc565b50613a1c3360008585614b48565b90506000805460ff1916600117905592915050565b6001600160a01b03811660009081526016602052604090205460ff16612163576005546040805163929fe9a160e01b81526001600160a01b0384811660048301523060248301529151919092169163929fe9a1916044808301926020929190829003018186803b158015613aa457600080fd5b505afa158015613ab8573d6000803e3d6000fd5b505050506040513d6020811015613ace57600080fd5b505115613b4d576001600160a01b0381166000908152600e6020818152604080842054601583529320839055601454919052613b0991612e27565b6014556001600160a01b038116600081815260156020908152604091829020548251938452908301528051600080516020615f0e8339815191529281900390910190a15b6001600160a01b0381166000908152601660205260409020805460ff1916600117905550565b600080613b8260145484612e27565b905060175460001480613ba3575060175415801590613ba357506017548111155b15613c1e5760148190556001600160a01b038416600090815260156020526040902054613bd09084612e27565b6001600160a01b03851660008181526015602090815260409182902084905581519283528201929092528151600080516020615f0e833981519152929181900390910190a182915050610fce565b6014546017541115613cbc576000613c3a601754601454612e64565b9050613c4860145482612e27565b6014556001600160a01b038516600090815260156020526040902054613c6e9082612e27565b6001600160a01b03861660008181526015602090815260409182902084905581519283528201929092528151600080516020615f0e833981519152929181900390910190a19150610fce9050565b5060009392505050565b80613cd057613d48565b613cdc60145482612e64565b6014556001600160a01b038216600090815260156020526040902054613d029082612e64565b6001600160a01b03831660008181526015602090815260409182902084905581519283528201929092528151600080516020615f0e833981519152929181900390910190a15b5050565b6001600160a01b03811660009081526010602052604081208054613d7457600091505061153f565b6000613d868260000154600a54613fbf565b90506000613d98828460010154614001565b95945050505050565b4290565b600354600090819061010090046001600160a01b03163314613dcd57612c986001602c6134d7565b613dd5613da1565b60095414613de957612c98600a602b6134d7565b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3a57600080fd5b505afa158015613e4e573d6000803e3d6000fd5b505050506040513d6020811015613e6457600080fd5b5051613ea5576040805162461bcd60e51b815260206004820152600b60248201526a696e76616c69642049524d60a81b604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269281900390910190a1600061153b565b60008054819060ff16613f4f576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055613f616124bc565b50612f04338585614f24565b613f75615d65565b6040518060200160405280613f8e856000015185613fbf565b90529392505050565b6000613fa1615d65565b613fab8585613f6d565b9050613d98613fb982614a9b565b84612e27565b6000612e5d83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f770000000000000000008152506152a5565b6000612e5d83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b81525061531b565b600061403f84613a31565b61404883613a31565b6005546040805163d02f735160e01b81523060048201526001600160a01b03888116602483015287811660448301528681166064830152608482018690529151919092169163d02f73519160a48083019260209291908290030181600087803b1580156140b457600080fd5b505af11580156140c8573d6000803e3d6000fd5b505050506040513d60208110156140de57600080fd5b50511561411d576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b8161412a57506000613391565b836001600160a01b0316836001600160a01b03161415614188576040805162461bcd60e51b815260206004820152601460248201527334b73b30b634b21030b1b1b7bab73a103830b4b960611b604482015290519081900360640190fd5b6001600160a01b0383166000908152600e60205260409020546141ab9083612e64565b6001600160a01b038085166000908152600e602052604080822093909355908616815220546141da9083612e27565b6001600160a01b038086166000908152600e60209081526040808320949094559186168152601590915220546142109083612e64565b6001600160a01b03808516600090815260156020526040808220939093559086168152205461423f9083612e27565b6001600160a01b038086166000818152601560209081526040918290209490945580518681529051919392871692600080516020615eee83398151915292918290030190a36001600160a01b038316600081815260156020908152604091829020548251938452908301528051600080516020615f0e8339815191529281900390910190a16001600160a01b038416600081815260156020908152604091829020548251938452908301528051600080516020615f0e8339815191529281900390910190a160055460408051636d35bf9160e01b81523060048201526001600160a01b038881166024830152878116604483015286811660648301526084820186905291519190921691636d35bf919160a480830192600092919082900301818387803b15801561436f57600080fd5b505af1158015614383573d6000803e3d6000fd5b5060009250613d98915050565b6001600160a01b03811660009081526016602052604081205460ff16156143d057506001600160a01b03811660009081526015602052604090205461153f565b506001600160a01b0381166000908152600e602052604090205461153f565b6000805460ff16614434576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556144466124bc565b50613a1c33848461537d565b6000805460ff16614497576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556144a96124bc565b50613a1c3384600085614b48565b60008054819060ff166144fe576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191690556145106124bc565b506000846001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561454e57600080fd5b505af1158015614562573d6000803e3d6000fd5b505050506040513d602081101561457857600080fd5b5051146145c5576040805162461bcd60e51b81526020600482015260166024820152751858d8dc9d59481a5b9d195c995cdd0819985a5b195960521b604482015290519081900360640190fd5b6145d2338787878761560b565b915091506000805460ff19166001179055909590945092505050565b60035460009061010090046001600160a01b03163314614614576115c9600160316134d7565b61461c613da1565b60095414614630576115c9600a60326134d7565b670de0b6b3a764000082111561464c576115c9600260336134d7565b6008805490839055604080518281526020810185905281517faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f821460929181900390910190a1600061153b565b600083830182858210156147285760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156146ed5781810151838201526020016146d5565b50505050905090810190601f16801561471a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50949350505050565b600081848411156147835760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156146ed5781810151838201526020016146d5565b505050900390565b60055460408051631200453160e11b81523060048201526001600160a01b0387811660248301528681166044830152606482018690529151600093849316916324008a6291608480830192602092919082900301818787803b1580156147f057600080fd5b505af1158015614804573d6000803e3d6000fd5b505050506040513d602081101561481a57600080fd5b505115614859576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b614861613da1565b600954146148a8576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b6148b0615df2565b6001600160a01b03861660009081526010602052604090206001015460608201526148da86613d4c565b60808201526000198514156148f85760808101516040820152614900565b604081018590525b61490f878260400151866136b6565b60e08201819052608082015161492491612e64565b60a0820152600b5460e082015161493b9190612e64565b60c0820190815260a080830180516001600160a01b03808b16600081815260106020908152604091829020948555600a546001909501949094559551600b81905560e088015194518751938f16845293830191909152818601939093526060810191909152608081019190915291517f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19281900390910190a160055460e0820151606083015160408051631ededc9160e01b81523060048201526001600160a01b038c811660248301528b8116604483015260648201949094526084810192909252519190921691631ededc919160a480830192600092919082900301818387803b158015614a4957600080fd5b505af1158015614a5d573d6000803e3d6000fd5b5060009250614a6a915050565b8160e00151925092505094509492505050565b6000612e5d614a9484670de0b6b3a7640000613fbf565b8351614001565b51670de0b6b3a7640000900490565b600080600080614ab8613da1565b60095414614ad757614acc600a60376134d7565b93509150614b419050565b614ae23387876136b6565b9050614af0600c5482612e27565b600c819055604080513381526020810184905280820183905290519193507fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc5919081900360600190a1600093509150505b9250929050565b6000614b5385613a31565b831580614b5e575082155b614b9b576040805162461bcd60e51b8152602060048201526009602482015268189859081a5b9c1d5d60ba1b604482015290519081900360640190fd5b614ba3615e38565b614bab612f1e565b81528415614bdc57602080820186905260408051918201905281518152614bd2908661341a565b6040820152614c05565b614bf88460405180602001604052808460000151815250615d19565b6020820152604081018490525b6001600160a01b0386166000908152600e60209081526040808320546015909252822054614c339190612e64565b905060008090508183602001511115614c50578183602001510390505b6005546040805163eabe7d9160e01b81523060048201526001600160a01b038b81166024830152604482018590529151919092169163eabe7d919160648083019260209291908290030181600087803b158015614cac57600080fd5b505af1158015614cc0573d6000803e3d6000fd5b505050506040513d6020811015614cd657600080fd5b505115614d15576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b614d1d613da1565b60095414614d64576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b8260400151614d71612e21565b1015614db8576040805162461bcd60e51b81526020600482015260116024820152700d2dce6eaccccd2c6d2cadce840c6c2e6d607b1b604482015290519081900360640190fd5b614dc8600d548460200151612e64565b600d556001600160a01b0388166000908152600e602090815260409091205490840151614df59190612e64565b6001600160a01b0389166000908152600e6020526040902055614e188882613cc6565b614e27888460400151876135bd565b306001600160a01b0316886001600160a01b0316600080516020615eee83398151915285602001516040518082815260200191505060405180910390a360408084015160208086015183516001600160a01b038d168152918201929092528083019190915290517fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a9299181900360600190a1600554604080850151602086015182516351dff98960e01b81523060048201526001600160a01b038d811660248301526044820193909352606481019190915291519216916351dff9899160848082019260009290919082900301818387803b15801561336a57600080fd5b600080614f3085613a31565b60055460408051634ef4c3e160e01b81523060048201526001600160a01b0388811660248301526044820188905291519190921691634ef4c3e19160648083019260209291908290030181600087803b158015614f8c57600080fd5b505af1158015614fa0573d6000803e3d6000fd5b505050506040513d6020811015614fb657600080fd5b505115614ff5576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b836150055750600090508061529d565b61500d613da1565b60095414615054576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b61505c615e38565b615064612f1e565b81526150718686866136b6565b6040808301829052805160208101909152825181526150909190615d19565b60208201819052600d546150a391612e27565b600d556001600160a01b0386166000908152600e6020908152604090912054908201516150d09190612e27565b6001600160a01b038088166000818152600e602090815260409182902094909455600554815163929fe9a160e01b81526004810193909352306024840152905192169263929fe9a192604480840193829003018186803b15801561513357600080fd5b505afa158015615147573d6000803e3d6000fd5b505050506040513d602081101561515d57600080fd5b50511561517457615172868260200151613b73565b505b60408082015160208084015183516001600160a01b038b168152918201929092528083019190915290517f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f9181900360600190a1856001600160a01b0316306001600160a01b0316600080516020615eee83398151915283602001516040518082815260200191505060405180910390a3600554604080830151602084015182516341c728b960e01b81523060048201526001600160a01b038b811660248301526044820193909352606481019190915291519216916341c728b99160848082019260009290919082900301818387803b15801561527157600080fd5b505af1158015615285573d6000803e3d6000fd5b5060009250615292915050565b816040015192509250505b935093915050565b60008315806152b2575082155b156152bf57506000612e5d565b838302838582816152cc57fe5b041483906147285760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156146ed5781810151838201526020016146d5565b6000818361536a5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156146ed5781810151838201526020016146d5565b5082848161537457fe5b04949350505050565b6005546040805163368f515360e21b81523060048201526001600160a01b038681166024830152604482018690529151600093929092169163da3d454c9160648082019260209290919082900301818787803b1580156153dc57600080fd5b505af11580156153f0573d6000803e3d6000fd5b505050506040513d602081101561540657600080fd5b505115615445576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b61544d613da1565b60095414615494576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b8261549d612e21565b10156154e4576040805162461bcd60e51b81526020600482015260116024820152700d2dce6eaccccd2c6d2cadce840c6c2e6d607b1b604482015290519081900360640190fd5b6154ec615e59565b6154f585613d4c565b602082018190526155069085612e27565b6040820152600b546155189085612e27565b606082019081526040808301516001600160a01b0388166000908152601060205291909120908155600a5460019091015551600b556155588585856135bd565b60408082015160608084015183516001600160a01b038a16815260208101899052808501939093529082015290517f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809181900360800190a160055460408051635c77860560e01b81523060048201526001600160a01b0388811660248301526044820188905291519190921691635c77860591606480830192600092919082900301818387803b15801561436f57600080fd5b60055460408051632fe3f38f60e11b81523060048201526001600160a01b0385811660248301528881166044830152878116606483015260848201879052915160009384931691635fc7e71e9160a480830192602092919082900301818787803b15801561567857600080fd5b505af115801561568c573d6000803e3d6000fd5b505050506040513d60208110156156a257600080fd5b5051156156e1576040805162461bcd60e51b81526020600482015260086024820152671c995a9958dd195960c21b604482015290519081900360640190fd5b6156e9613da1565b60095414615730576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b615738613da1565b846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561577157600080fd5b505afa158015615785573d6000803e3d6000fd5b505050506040513d602081101561579b57600080fd5b5051146157e1576040805162461bcd60e51b815260206004820152600f60248201526e6d61726b6574206973207374616c6560881b604482015290519081900360640190fd5b866001600160a01b0316866001600160a01b0316141561583f576040805162461bcd60e51b815260206004820152601460248201527334b73b30b634b21030b1b1b7bab73a103830b4b960611b604482015290519081900360640190fd5b60008511801561585157506000198514155b6158a2576040805162461bcd60e51b815260206004820152601e60248201527f696e76616c696420636c6f736520616d6f756e74207265717565737465640000604482015290519081900360640190fd5b6158aa615e82565b6158b68888888761478b565b602083015280825215615906576040805162461bcd60e51b81526020600482015260136024820152721c995c185e48189bdc9c9bddc819985a5b1959606a1b604482015290519081900360640190fd5b60055460208201516040805163c488847b60e01b81523060048201526001600160a01b03898116602483015260448201939093528151929093169263c488847b9260648083019392829003018186803b15801561596257600080fd5b505afa158015615976573d6000803e3d6000fd5b505050506040513d604081101561598c57600080fd5b508051602090910151606083015260408201819052156159f3576040805162461bcd60e51b815260206004820181905260248201527f6661696c656420746f2063616c63756c617465207365697a6520616d6f756e74604482015290519081900360640190fd5b8060600151856001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015615a4e57600080fd5b505afa158015615a62573d6000803e3d6000fd5b505050506040513d6020811015615a7857600080fd5b50511015615acd576040805162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d5543480000000000000000604482015290519081900360640190fd5b60006001600160a01b038616301415615af757615af0308a8a8560600151614034565b9050615b87565b60608201516040805163b2a02ff160e01b81526001600160a01b038c811660048301528b81166024830152604482019390935290519188169163b2a02ff1916064808201926020929091908290030181600087803b158015615b5857600080fd5b505af1158015615b6c573d6000803e3d6000fd5b505050506040513d6020811015615b8257600080fd5b505190505b8015615bd1576040805162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b604482015290519081900360640190fd5b7f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb528989846020015189866060015160405180866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001848152602001836001600160a01b03166001600160a01b031681526020018281526020019550505050505060405180910390a160055460208301516060840151604080516347ef3b3b60e01b81523060048201526001600160a01b038b811660248301528e811660448301528d81166064830152608482019490945260a48101929092525191909216916347ef3b3b9160c480830192600092919082900301818387803b158015615ce357600080fd5b505af1158015615cf7573d6000803e3d6000fd5b5060009250615d04915050565b82602001519350935050509550959350505050565b6000615d23615d65565b61342e8484615d30615d65565b6000615d44670de0b6b3a764000085613fbf565b90506040518060200160405280615d5b8386614a7d565b9052949350505050565b6040518060200160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615db957805160ff1916838001178555615de6565b82800160010185558215615de6579182015b82811115615de6578251825591602001919060010190615dcb565b50612f80929150615eaa565b6040805161010081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b604080516080810190915280600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6112b691905b80821115612f805760008155600101615eb056fe45524333313536466c617368426f72726f776572496e746572666163652e6f6e466c6173684c6f616eddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef1d22042d9eb89f2620572acbf8d85b66fba5a2ca19d166d8659574440175c964a265627a7a72315820ded64af99502bf4479d8326f3eef4e0b56a980917f48fe65913f0ad1c8fd76a964736f6c63430005110032",
  "devdoc": {
    "author": "Cream",
    "methods": {
      "_acceptAdmin()": {
        "details": "Admin function for pending admin to accept role and update admin",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_addReserves(uint256)": {
        "params": {
          "addAmount": "The amount fo underlying token to add as reserves"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_becomeImplementation(bytes)": {
        "params": {
          "data": "The encoded bytes data for any initialization"
        }
      },
      "_reduceReserves(uint256)": {
        "params": {
          "reduceAmount": "Amount of reduction to reserves"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setCollateralCap(uint256)": {
        "params": {
          "newCollateralCap": "New collateral cap for this market. A value of 0 corresponds to no cap."
        }
      },
      "_setComptroller(address)": {
        "details": "Admin function to set a new comptroller",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setFlashloanLender(address)": {
        "params": {
          "lender": "The flash loan lender which is the only caller could call flashloan"
        }
      },
      "_setInterestRateModel(address)": {
        "details": "Admin function to accrue interest and update the interest rate model",
        "params": {
          "newInterestRateModel": "the new interest rate model to use"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setPendingAdmin(address)": {
        "details": "Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
        "params": {
          "newPendingAdmin": "New pending admin."
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setReserveFactor(uint256)": {
        "details": "Admin function to accrue interest and set a new reserve factor",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "accrueInterest()": {
        "details": "This calculates interest accrued from the last checkpointed block  up to the current block and writes new checkpoint to storage."
      },
      "allowance(address,address)": {
        "params": {
          "owner": "The address of the account which owns the tokens to be spent",
          "spender": "The address of the account which may transfer tokens"
        },
        "return": "The number of tokens allowed to be spent (-1 means infinite)"
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "amount": "The number of tokens that are approved (-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "return": "Whether or not the approval succeeded"
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address of the account to query"
        },
        "return": "The number of tokens owned by `owner`"
      },
      "balanceOfUnderlying(address)": {
        "details": "This also accrues interest in a transaction",
        "params": {
          "owner": "The address of the account to query"
        },
        "return": "The amount of underlying owned by `owner`"
      },
      "borrow(uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset to borrow"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "borrowBalanceCurrent(address)": {
        "params": {
          "account": "The address whose balance should be calculated after updating borrowIndex"
        },
        "return": "The calculated balance"
      },
      "borrowBalanceStored(address)": {
        "params": {
          "account": "The address whose balance should be calculated"
        },
        "return": "The calculated balance"
      },
      "borrowRatePerBlock()": {
        "return": "The borrow interest rate per block, scaled by 1e18"
      },
      "estimateBorrowRatePerBlockAfterChange(uint256,bool)": {
        "return": "The borrow interest rate per block, scaled by 1e18"
      },
      "estimateSupplyRatePerBlockAfterChange(uint256,bool)": {
        "return": "The supply interest rate per block, scaled by 1e18"
      },
      "exchangeRateCurrent()": {
        "return": "Calculated exchange rate scaled by 1e18"
      },
      "exchangeRateStored()": {
        "details": "This function does not accrue interest before calculating the exchange rate",
        "return": "Calculated exchange rate scaled by 1e18"
      },
      "flashFee(uint256)": {
        "params": {
          "amount": "amount of token to borrow"
        }
      },
      "flashLoan(address,address,uint256,bytes)": {
        "params": {
          "amount": "The amount of the funds to be loaned",
          "data": "The other data",
          "initiator": "flash loan initiator",
          "receiver": "The receiver address for the funds"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "getAccountSnapshot(address)": {
        "details": "This is used by comptroller to more efficiently perform liquidity checks.",
        "params": {
          "account": "Address of the account to snapshot"
        },
        "return": "(possible error, token balance, borrow balance, exchange rate mantissa)"
      },
      "getCash()": {
        "return": "The quantity of underlying asset owned by this contract"
      },
      "initialize(address,address,address,uint256,string,string,uint8)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "decimals_": "ERC-20 decimal precision of this token",
          "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "ERC-20 name of this token",
          "symbol_": "ERC-20 symbol of this token",
          "underlying_": "The address of the underlying asset"
        }
      },
      "initialize(address,address,uint256,string,string,uint8)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "decimals_": "EIP-20 decimal precision of this token",
          "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "EIP-20 name of this token",
          "symbol_": "EIP-20 symbol of this token"
        }
      },
      "liquidateBorrow(address,uint256,address)": {
        "params": {
          "borrower": "The borrower of this cToken to be liquidated",
          "cTokenCollateral": "The market in which to seize collateral from the borrower",
          "repayAmount": "The amount of the underlying borrowed asset to repay"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "mint(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "mintAmount": "The amount of the underlying asset to supply"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "redeem(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemTokens": "The number of cTokens to redeem into underlying"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "redeemUnderlying(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemAmount": "The amount of underlying to redeem"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "registerCollateral(address)": {
        "details": "This function could only be called by comptroller.",
        "params": {
          "account": "The account to register"
        },
        "return": "The actual registered amount of collateral"
      },
      "repayBorrow(uint256)": {
        "params": {
          "repayAmount": "The amount to repay"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "repayBorrowBehalf(address,uint256)": {
        "params": {
          "borrower": "the account with the debt being payed off",
          "repayAmount": "The amount to repay"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "seize(address,address,uint256)": {
        "details": "Will fail unless called by another cToken during the process of liquidation. Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.",
        "params": {
          "borrower": "The account having collateral seized",
          "liquidator": "The account receiving seized collateral",
          "seizeTokens": "The number of cTokens to seize"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "supplyRatePerBlock()": {
        "return": "The supply interest rate per block, scaled by 1e18"
      },
      "totalBorrowsCurrent()": {
        "return": "The total borrows with interest"
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "return": "Whether or not the transfer succeeded"
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "return": "Whether or not the transfer succeeded"
      },
      "unregisterCollateral(address)": {
        "details": "This function could only be called by comptroller.",
        "params": {
          "account": "The account to unregister"
        }
      }
    },
    "title": "Cream's CCollateralCapErc20Delegate Contract"
  },
  "userdoc": {
    "methods": {
      "_acceptAdmin()": {
        "notice": "Accepts transfer of admin rights. msg.sender must be pendingAdmin"
      },
      "_addReserves(uint256)": {
        "notice": "The sender adds to reserves."
      },
      "_becomeImplementation(bytes)": {
        "notice": "Called by the delegator on a delegate to initialize it for duty"
      },
      "_reduceReserves(uint256)": {
        "notice": "Accrues interest and reduces reserves by transferring to admin"
      },
      "_resignImplementation()": {
        "notice": "Called by the delegator on a delegate to forfeit its responsibility"
      },
      "_setCollateralCap(uint256)": {
        "notice": "Set the given collateral cap for the market."
      },
      "_setComptroller(address)": {
        "notice": "Sets a new comptroller for the market"
      },
      "_setFlashloanLender(address)": {
        "notice": "Set the flash loan lender."
      },
      "_setInterestRateModel(address)": {
        "notice": "accrues interest and updates the interest rate model using _setInterestRateModelFresh"
      },
      "_setPendingAdmin(address)": {
        "notice": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."
      },
      "_setReserveFactor(uint256)": {
        "notice": "accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh"
      },
      "accrueInterest()": {
        "notice": "Applies accrued interest to total borrows and reserves"
      },
      "allowance(address,address)": {
        "notice": "Get the current allowance from `owner` for `spender`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the token balance of the `owner`"
      },
      "balanceOfUnderlying(address)": {
        "notice": "Get the underlying balance of the `owner`"
      },
      "borrow(uint256)": {
        "notice": "Sender borrows assets from the protocol to their own address"
      },
      "borrowBalanceCurrent(address)": {
        "notice": "Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex"
      },
      "borrowBalanceStored(address)": {
        "notice": "Return the borrow balance of account based on stored data"
      },
      "borrowRatePerBlock()": {
        "notice": "Returns the current per-block borrow interest rate for this cToken"
      },
      "constructor": "Construct an empty delegate",
      "estimateBorrowRatePerBlockAfterChange(uint256,bool)": {
        "notice": "Returns the estimated per-block borrow interest rate for this cToken after some change"
      },
      "estimateSupplyRatePerBlockAfterChange(uint256,bool)": {
        "notice": "Returns the estimated per-block supply interest rate for this cToken after some change"
      },
      "exchangeRateCurrent()": {
        "notice": "Accrue interest then return the up-to-date exchange rate"
      },
      "exchangeRateStored()": {
        "notice": "Calculates the exchange rate from the underlying to the CToken"
      },
      "flashFee(uint256)": {
        "notice": "Get the flash loan fees"
      },
      "flashLoan(address,address,uint256,bytes)": {
        "notice": "Flash loan funds to a given account."
      },
      "getAccountSnapshot(address)": {
        "notice": "Get a snapshot of the account's balances, and the cached exchange rate"
      },
      "getCash()": {
        "notice": "Get cash balance of this cToken in the underlying asset"
      },
      "gulp()": {
        "notice": "Absorb excess cash into reserves."
      },
      "initialize(address,address,address,uint256,string,string,uint8)": {
        "notice": "Initialize the new money market"
      },
      "initialize(address,address,uint256,string,string,uint8)": {
        "notice": "Initialize the money market"
      },
      "liquidateBorrow(address,uint256,address)": {
        "notice": "The sender liquidates the borrowers collateral. The collateral seized is transferred to the liquidator."
      },
      "maxFlashLoan()": {
        "notice": "Get the max flash loan amount"
      },
      "mint(uint256)": {
        "notice": "Sender supplies assets into the market and receives cTokens in exchange"
      },
      "redeem(uint256)": {
        "notice": "Sender redeems cTokens in exchange for the underlying asset"
      },
      "redeemUnderlying(uint256)": {
        "notice": "Sender redeems cTokens in exchange for a specified amount of underlying asset"
      },
      "registerCollateral(address)": {
        "notice": "Register account collateral tokens if there is space."
      },
      "repayBorrow(uint256)": {
        "notice": "Sender repays their own borrow"
      },
      "repayBorrowBehalf(address,uint256)": {
        "notice": "Sender repays a borrow belonging to borrower"
      },
      "seize(address,address,uint256)": {
        "notice": "Transfers collateral tokens (this market) to the liquidator."
      },
      "supplyRatePerBlock()": {
        "notice": "Returns the current per-block supply interest rate for this cToken"
      },
      "totalBorrowsCurrent()": {
        "notice": "Returns the current total borrows plus accrued interest"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "unregisterCollateral(address)": {
        "notice": "Unregister account collateral tokens if the account still has enough collateral."
      }
    },
    "notice": "CTokens which wrap an EIP-20 underlying and are delegated to"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12024,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12026,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 12028,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 12030,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 12038,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "admin",
        "offset": 1,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 12040,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 12042,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "comptroller",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ComptrollerInterface)20851"
      },
      {
        "astId": 12044,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "interestRateModel",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(InterestRateModel)24274"
      },
      {
        "astId": 12046,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "initialExchangeRateMantissa",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12048,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "reserveFactorMantissa",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12050,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "accrualBlockNumber",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12052,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "borrowIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 12054,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "totalBorrows",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 12056,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "totalReserves",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 12058,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "totalSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12062,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "accountTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12068,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "transferAllowances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 12077,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "accountBorrows",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(BorrowSnapshot)12073_storage)"
      },
      {
        "astId": 12080,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "underlying",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 12082,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "implementation",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 12085,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "internalCash",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 12088,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "totalCollateralTokens",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 12092,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "accountCollateralTokens",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12096,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "isCollateralTokenInit",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12098,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "collateralCap",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 12100,
        "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
        "label": "flashloanLender",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ComptrollerInterface)20851": {
        "encoding": "inplace",
        "label": "contract ComptrollerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(InterestRateModel)24274": {
        "encoding": "inplace",
        "label": "contract InterestRateModel",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BorrowSnapshot)12073_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CTokenStorage.BorrowSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowSnapshot)12073_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BorrowSnapshot)12073_storage": {
        "encoding": "inplace",
        "label": "struct CTokenStorage.BorrowSnapshot",
        "members": [
          {
            "astId": 12070,
            "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12072,
            "contract": "contracts/CCollateralCapErc20Delegate.sol:CCollateralCapErc20Delegate",
            "label": "interestIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}